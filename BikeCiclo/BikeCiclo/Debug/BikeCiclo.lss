
BikeCiclo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000021e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000100  20000068  0000224c  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000168  0000234c  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   000210cc  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030d2  00000000  00000000  000411b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000418  00000000  00000000  00044287  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000470  00000000  00000000  0004469f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00018726  00000000  00000000  00044b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a025  00000000  00000000  0005d235  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00082f39  00000000  00000000  0006725a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000fd0  00000000  00000000  000ea194  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003f35  00000000  00000000  000eb164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 21 00 20 39 11 00 00 35 11 00 00 35 11 00 00     h!. 9...5...5...
	...
      2c:	35 11 00 00 00 00 00 00 00 00 00 00 35 11 00 00     5...........5...
      3c:	35 11 00 00 35 11 00 00 35 11 00 00 35 11 00 00     5...5...5...5...
      4c:	35 11 00 00 35 11 00 00 35 11 00 00 35 11 00 00     5...5...5...5...
      5c:	35 11 00 00 35 11 00 00 c5 05 00 00 d5 05 00 00     5...5...........
      6c:	e5 05 00 00 f5 05 00 00 05 06 00 00 15 06 00 00     ................
      7c:	35 11 00 00 35 11 00 00 35 11 00 00 35 11 00 00     5...5...5...5...
      8c:	35 11 00 00 35 11 00 00 00 00 00 00 00 00 00 00     5...5...........
      9c:	35 11 00 00 35 11 00 00 00 00 00 00 35 11 00 00     5...5.......5...
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	000021e4 	.word	0x000021e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	000021e4 	.word	0x000021e4
     10c:	000021e4 	.word	0x000021e4
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	2b00      	cmp	r3, #0
     11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     120:	2b00      	cmp	r3, #0
     122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     124:	2200      	movs	r2, #0
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
     128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
     12c:	6813      	ldr	r3, [r2, #0]
     12e:	3301      	adds	r3, #1
     130:	6013      	str	r3, [r2, #0]
}
     132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     134:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     13a:	2200      	movs	r2, #0
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
     13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     140:	3201      	adds	r2, #1
     142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
     144:	701a      	strb	r2, [r3, #0]
     146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
     148:	20000084 	.word	0x20000084
     14c:	20000088 	.word	0x20000088
     150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	3a01      	subs	r2, #1
     15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
     162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     16a:	2201      	movs	r2, #1
     16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
     16e:	701a      	strb	r2, [r3, #0]
     170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     174:	b662      	cpsie	i
	}
}
     176:	4770      	bx	lr
     178:	20000084 	.word	0x20000084
     17c:	20000088 	.word	0x20000088
     180:	20000000 	.word	0x20000000

00000184 <system_board_init>:




void system_board_init(void)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     188:	ac01      	add	r4, sp, #4
     18a:	2501      	movs	r5, #1
     18c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18e:	2700      	movs	r7, #0
     190:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     194:	0021      	movs	r1, r4
     196:	2013      	movs	r0, #19
     198:	4e06      	ldr	r6, [pc, #24]	; (1b4 <system_board_init+0x30>)
     19a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	0312      	lsls	r2, r2, #12
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_board_init+0x34>)
     1a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a8:	0021      	movs	r1, r4
     1aa:	201c      	movs	r0, #28
     1ac:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     1ae:	b003      	add	sp, #12
     1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	000001bd 	.word	0x000001bd
     1b8:	41004400 	.word	0x41004400

000001bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1bc:	b500      	push	{lr}
     1be:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1c0:	ab01      	add	r3, sp, #4
     1c2:	2280      	movs	r2, #128	; 0x80
     1c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1c6:	780a      	ldrb	r2, [r1, #0]
     1c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1ca:	784a      	ldrb	r2, [r1, #1]
     1cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1ce:	788a      	ldrb	r2, [r1, #2]
     1d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1d2:	0019      	movs	r1, r3
     1d4:	4b01      	ldr	r3, [pc, #4]	; (1dc <port_pin_set_config+0x20>)
     1d6:	4798      	blx	r3
}
     1d8:	b003      	add	sp, #12
     1da:	bd00      	pop	{pc}
     1dc:	000010d5 	.word	0x000010d5

000001e0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e2:	46de      	mov	lr, fp
     1e4:	4657      	mov	r7, sl
     1e6:	464e      	mov	r6, r9
     1e8:	4645      	mov	r5, r8
     1ea:	b5e0      	push	{r5, r6, r7, lr}
     1ec:	b087      	sub	sp, #28
     1ee:	4680      	mov	r8, r0
     1f0:	9104      	str	r1, [sp, #16]
     1f2:	0016      	movs	r6, r2
     1f4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     1f6:	2200      	movs	r2, #0
     1f8:	2300      	movs	r3, #0
     1fa:	2100      	movs	r1, #0
     1fc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     1fe:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     200:	2001      	movs	r0, #1
     202:	0021      	movs	r1, r4
     204:	9600      	str	r6, [sp, #0]
     206:	9701      	str	r7, [sp, #4]
     208:	465c      	mov	r4, fp
     20a:	9403      	str	r4, [sp, #12]
     20c:	4644      	mov	r4, r8
     20e:	9405      	str	r4, [sp, #20]
     210:	e013      	b.n	23a <long_division+0x5a>
     212:	2420      	movs	r4, #32
     214:	1a64      	subs	r4, r4, r1
     216:	0005      	movs	r5, r0
     218:	40e5      	lsrs	r5, r4
     21a:	46a8      	mov	r8, r5
     21c:	e014      	b.n	248 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     21e:	9c00      	ldr	r4, [sp, #0]
     220:	9d01      	ldr	r5, [sp, #4]
     222:	1b12      	subs	r2, r2, r4
     224:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     226:	465c      	mov	r4, fp
     228:	464d      	mov	r5, r9
     22a:	432c      	orrs	r4, r5
     22c:	46a3      	mov	fp, r4
     22e:	9c03      	ldr	r4, [sp, #12]
     230:	4645      	mov	r5, r8
     232:	432c      	orrs	r4, r5
     234:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     236:	3901      	subs	r1, #1
     238:	d325      	bcc.n	286 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     23a:	2420      	movs	r4, #32
     23c:	4264      	negs	r4, r4
     23e:	190c      	adds	r4, r1, r4
     240:	d4e7      	bmi.n	212 <long_division+0x32>
     242:	0005      	movs	r5, r0
     244:	40a5      	lsls	r5, r4
     246:	46a8      	mov	r8, r5
     248:	0004      	movs	r4, r0
     24a:	408c      	lsls	r4, r1
     24c:	46a1      	mov	r9, r4
		r = r << 1;
     24e:	1892      	adds	r2, r2, r2
     250:	415b      	adcs	r3, r3
     252:	0014      	movs	r4, r2
     254:	001d      	movs	r5, r3
		if (n & bit_shift) {
     256:	9e05      	ldr	r6, [sp, #20]
     258:	464f      	mov	r7, r9
     25a:	403e      	ands	r6, r7
     25c:	46b4      	mov	ip, r6
     25e:	9e04      	ldr	r6, [sp, #16]
     260:	4647      	mov	r7, r8
     262:	403e      	ands	r6, r7
     264:	46b2      	mov	sl, r6
     266:	4666      	mov	r6, ip
     268:	4657      	mov	r7, sl
     26a:	433e      	orrs	r6, r7
     26c:	d003      	beq.n	276 <long_division+0x96>
			r |= 0x01;
     26e:	0006      	movs	r6, r0
     270:	4326      	orrs	r6, r4
     272:	0032      	movs	r2, r6
     274:	002b      	movs	r3, r5
		if (r >= d) {
     276:	9c00      	ldr	r4, [sp, #0]
     278:	9d01      	ldr	r5, [sp, #4]
     27a:	429d      	cmp	r5, r3
     27c:	d8db      	bhi.n	236 <long_division+0x56>
     27e:	d1ce      	bne.n	21e <long_division+0x3e>
     280:	4294      	cmp	r4, r2
     282:	d8d8      	bhi.n	236 <long_division+0x56>
     284:	e7cb      	b.n	21e <long_division+0x3e>
     286:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     288:	4658      	mov	r0, fp
     28a:	0019      	movs	r1, r3
     28c:	b007      	add	sp, #28
     28e:	bc3c      	pop	{r2, r3, r4, r5}
     290:	4690      	mov	r8, r2
     292:	4699      	mov	r9, r3
     294:	46a2      	mov	sl, r4
     296:	46ab      	mov	fp, r5
     298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000029a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     29a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     29c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     29e:	2340      	movs	r3, #64	; 0x40
     2a0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     2a2:	4281      	cmp	r1, r0
     2a4:	d202      	bcs.n	2ac <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     2a6:	0018      	movs	r0, r3
     2a8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     2aa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     2ac:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     2ae:	1c63      	adds	r3, r4, #1
     2b0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     2b2:	4288      	cmp	r0, r1
     2b4:	d9f9      	bls.n	2aa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2b6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     2b8:	2cff      	cmp	r4, #255	; 0xff
     2ba:	d8f4      	bhi.n	2a6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     2bc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     2be:	2300      	movs	r3, #0
     2c0:	e7f1      	b.n	2a6 <_sercom_get_sync_baud_val+0xc>
	...

000002c4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2c6:	b083      	sub	sp, #12
     2c8:	000f      	movs	r7, r1
     2ca:	0016      	movs	r6, r2
     2cc:	aa08      	add	r2, sp, #32
     2ce:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     2d0:	0004      	movs	r4, r0
     2d2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2d4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     2d6:	42bc      	cmp	r4, r7
     2d8:	d902      	bls.n	2e0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     2da:	0010      	movs	r0, r2
     2dc:	b003      	add	sp, #12
     2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     2e0:	2b00      	cmp	r3, #0
     2e2:	d114      	bne.n	30e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     2e4:	0002      	movs	r2, r0
     2e6:	0008      	movs	r0, r1
     2e8:	2100      	movs	r1, #0
     2ea:	4c19      	ldr	r4, [pc, #100]	; (350 <_sercom_get_async_baud_val+0x8c>)
     2ec:	47a0      	blx	r4
     2ee:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     2f0:	003a      	movs	r2, r7
     2f2:	2300      	movs	r3, #0
     2f4:	2000      	movs	r0, #0
     2f6:	4c17      	ldr	r4, [pc, #92]	; (354 <_sercom_get_async_baud_val+0x90>)
     2f8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     2fa:	2200      	movs	r2, #0
     2fc:	2301      	movs	r3, #1
     2fe:	1a12      	subs	r2, r2, r0
     300:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     302:	0c12      	lsrs	r2, r2, #16
     304:	041b      	lsls	r3, r3, #16
     306:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     308:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     30a:	2200      	movs	r2, #0
     30c:	e7e5      	b.n	2da <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     30e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     310:	2b01      	cmp	r3, #1
     312:	d1f9      	bne.n	308 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     314:	000a      	movs	r2, r1
     316:	2300      	movs	r3, #0
     318:	2100      	movs	r1, #0
     31a:	4c0d      	ldr	r4, [pc, #52]	; (350 <_sercom_get_async_baud_val+0x8c>)
     31c:	47a0      	blx	r4
     31e:	0002      	movs	r2, r0
     320:	000b      	movs	r3, r1
     322:	9200      	str	r2, [sp, #0]
     324:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     326:	0038      	movs	r0, r7
     328:	2100      	movs	r1, #0
     32a:	4c0a      	ldr	r4, [pc, #40]	; (354 <_sercom_get_async_baud_val+0x90>)
     32c:	47a0      	blx	r4
     32e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     330:	2380      	movs	r3, #128	; 0x80
     332:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     334:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     336:	4298      	cmp	r0, r3
     338:	d8cf      	bhi.n	2da <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     33a:	0f79      	lsrs	r1, r7, #29
     33c:	00f8      	lsls	r0, r7, #3
     33e:	9a00      	ldr	r2, [sp, #0]
     340:	9b01      	ldr	r3, [sp, #4]
     342:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     344:	00ea      	lsls	r2, r5, #3
     346:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     348:	b2d2      	uxtb	r2, r2
     34a:	0352      	lsls	r2, r2, #13
     34c:	432a      	orrs	r2, r5
     34e:	e7db      	b.n	308 <_sercom_get_async_baud_val+0x44>
     350:	00001575 	.word	0x00001575
     354:	000001e1 	.word	0x000001e1

00000358 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     358:	b510      	push	{r4, lr}
     35a:	b082      	sub	sp, #8
     35c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     35e:	4b0e      	ldr	r3, [pc, #56]	; (398 <sercom_set_gclk_generator+0x40>)
     360:	781b      	ldrb	r3, [r3, #0]
     362:	2b00      	cmp	r3, #0
     364:	d007      	beq.n	376 <sercom_set_gclk_generator+0x1e>
     366:	2900      	cmp	r1, #0
     368:	d105      	bne.n	376 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     36a:	4b0b      	ldr	r3, [pc, #44]	; (398 <sercom_set_gclk_generator+0x40>)
     36c:	785b      	ldrb	r3, [r3, #1]
     36e:	4283      	cmp	r3, r0
     370:	d010      	beq.n	394 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     372:	201d      	movs	r0, #29
     374:	e00c      	b.n	390 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     376:	a901      	add	r1, sp, #4
     378:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     37a:	2013      	movs	r0, #19
     37c:	4b07      	ldr	r3, [pc, #28]	; (39c <sercom_set_gclk_generator+0x44>)
     37e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     380:	2013      	movs	r0, #19
     382:	4b07      	ldr	r3, [pc, #28]	; (3a0 <sercom_set_gclk_generator+0x48>)
     384:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     386:	4b04      	ldr	r3, [pc, #16]	; (398 <sercom_set_gclk_generator+0x40>)
     388:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     38a:	2201      	movs	r2, #1
     38c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     38e:	2000      	movs	r0, #0
}
     390:	b002      	add	sp, #8
     392:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     394:	2000      	movs	r0, #0
     396:	e7fb      	b.n	390 <sercom_set_gclk_generator+0x38>
     398:	2000008c 	.word	0x2000008c
     39c:	00000fdd 	.word	0x00000fdd
     3a0:	00000f51 	.word	0x00000f51

000003a4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     3a4:	4b40      	ldr	r3, [pc, #256]	; (4a8 <_sercom_get_default_pad+0x104>)
     3a6:	4298      	cmp	r0, r3
     3a8:	d031      	beq.n	40e <_sercom_get_default_pad+0x6a>
     3aa:	d90a      	bls.n	3c2 <_sercom_get_default_pad+0x1e>
     3ac:	4b3f      	ldr	r3, [pc, #252]	; (4ac <_sercom_get_default_pad+0x108>)
     3ae:	4298      	cmp	r0, r3
     3b0:	d04d      	beq.n	44e <_sercom_get_default_pad+0xaa>
     3b2:	4b3f      	ldr	r3, [pc, #252]	; (4b0 <_sercom_get_default_pad+0x10c>)
     3b4:	4298      	cmp	r0, r3
     3b6:	d05a      	beq.n	46e <_sercom_get_default_pad+0xca>
     3b8:	4b3e      	ldr	r3, [pc, #248]	; (4b4 <_sercom_get_default_pad+0x110>)
     3ba:	4298      	cmp	r0, r3
     3bc:	d037      	beq.n	42e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     3be:	2000      	movs	r0, #0
}
     3c0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     3c2:	4b3d      	ldr	r3, [pc, #244]	; (4b8 <_sercom_get_default_pad+0x114>)
     3c4:	4298      	cmp	r0, r3
     3c6:	d00c      	beq.n	3e2 <_sercom_get_default_pad+0x3e>
     3c8:	4b3c      	ldr	r3, [pc, #240]	; (4bc <_sercom_get_default_pad+0x118>)
     3ca:	4298      	cmp	r0, r3
     3cc:	d1f7      	bne.n	3be <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3ce:	2901      	cmp	r1, #1
     3d0:	d017      	beq.n	402 <_sercom_get_default_pad+0x5e>
     3d2:	2900      	cmp	r1, #0
     3d4:	d05d      	beq.n	492 <_sercom_get_default_pad+0xee>
     3d6:	2902      	cmp	r1, #2
     3d8:	d015      	beq.n	406 <_sercom_get_default_pad+0x62>
     3da:	2903      	cmp	r1, #3
     3dc:	d015      	beq.n	40a <_sercom_get_default_pad+0x66>
	return 0;
     3de:	2000      	movs	r0, #0
     3e0:	e7ee      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3e2:	2901      	cmp	r1, #1
     3e4:	d007      	beq.n	3f6 <_sercom_get_default_pad+0x52>
     3e6:	2900      	cmp	r1, #0
     3e8:	d051      	beq.n	48e <_sercom_get_default_pad+0xea>
     3ea:	2902      	cmp	r1, #2
     3ec:	d005      	beq.n	3fa <_sercom_get_default_pad+0x56>
     3ee:	2903      	cmp	r1, #3
     3f0:	d005      	beq.n	3fe <_sercom_get_default_pad+0x5a>
	return 0;
     3f2:	2000      	movs	r0, #0
     3f4:	e7e4      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3f6:	4832      	ldr	r0, [pc, #200]	; (4c0 <_sercom_get_default_pad+0x11c>)
     3f8:	e7e2      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     3fa:	4832      	ldr	r0, [pc, #200]	; (4c4 <_sercom_get_default_pad+0x120>)
     3fc:	e7e0      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     3fe:	4832      	ldr	r0, [pc, #200]	; (4c8 <_sercom_get_default_pad+0x124>)
     400:	e7de      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     402:	4832      	ldr	r0, [pc, #200]	; (4cc <_sercom_get_default_pad+0x128>)
     404:	e7dc      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     406:	4832      	ldr	r0, [pc, #200]	; (4d0 <_sercom_get_default_pad+0x12c>)
     408:	e7da      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     40a:	4832      	ldr	r0, [pc, #200]	; (4d4 <_sercom_get_default_pad+0x130>)
     40c:	e7d8      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     40e:	2901      	cmp	r1, #1
     410:	d007      	beq.n	422 <_sercom_get_default_pad+0x7e>
     412:	2900      	cmp	r1, #0
     414:	d03f      	beq.n	496 <_sercom_get_default_pad+0xf2>
     416:	2902      	cmp	r1, #2
     418:	d005      	beq.n	426 <_sercom_get_default_pad+0x82>
     41a:	2903      	cmp	r1, #3
     41c:	d005      	beq.n	42a <_sercom_get_default_pad+0x86>
	return 0;
     41e:	2000      	movs	r0, #0
     420:	e7ce      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     422:	482d      	ldr	r0, [pc, #180]	; (4d8 <_sercom_get_default_pad+0x134>)
     424:	e7cc      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     426:	482d      	ldr	r0, [pc, #180]	; (4dc <_sercom_get_default_pad+0x138>)
     428:	e7ca      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     42a:	482d      	ldr	r0, [pc, #180]	; (4e0 <_sercom_get_default_pad+0x13c>)
     42c:	e7c8      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     42e:	2901      	cmp	r1, #1
     430:	d007      	beq.n	442 <_sercom_get_default_pad+0x9e>
     432:	2900      	cmp	r1, #0
     434:	d031      	beq.n	49a <_sercom_get_default_pad+0xf6>
     436:	2902      	cmp	r1, #2
     438:	d005      	beq.n	446 <_sercom_get_default_pad+0xa2>
     43a:	2903      	cmp	r1, #3
     43c:	d005      	beq.n	44a <_sercom_get_default_pad+0xa6>
	return 0;
     43e:	2000      	movs	r0, #0
     440:	e7be      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     442:	4828      	ldr	r0, [pc, #160]	; (4e4 <_sercom_get_default_pad+0x140>)
     444:	e7bc      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     446:	4828      	ldr	r0, [pc, #160]	; (4e8 <_sercom_get_default_pad+0x144>)
     448:	e7ba      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     44a:	4828      	ldr	r0, [pc, #160]	; (4ec <_sercom_get_default_pad+0x148>)
     44c:	e7b8      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     44e:	2901      	cmp	r1, #1
     450:	d007      	beq.n	462 <_sercom_get_default_pad+0xbe>
     452:	2900      	cmp	r1, #0
     454:	d023      	beq.n	49e <_sercom_get_default_pad+0xfa>
     456:	2902      	cmp	r1, #2
     458:	d005      	beq.n	466 <_sercom_get_default_pad+0xc2>
     45a:	2903      	cmp	r1, #3
     45c:	d005      	beq.n	46a <_sercom_get_default_pad+0xc6>
	return 0;
     45e:	2000      	movs	r0, #0
     460:	e7ae      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     462:	4823      	ldr	r0, [pc, #140]	; (4f0 <_sercom_get_default_pad+0x14c>)
     464:	e7ac      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     466:	4823      	ldr	r0, [pc, #140]	; (4f4 <_sercom_get_default_pad+0x150>)
     468:	e7aa      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     46a:	4823      	ldr	r0, [pc, #140]	; (4f8 <_sercom_get_default_pad+0x154>)
     46c:	e7a8      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     46e:	2901      	cmp	r1, #1
     470:	d007      	beq.n	482 <_sercom_get_default_pad+0xde>
     472:	2900      	cmp	r1, #0
     474:	d015      	beq.n	4a2 <_sercom_get_default_pad+0xfe>
     476:	2902      	cmp	r1, #2
     478:	d005      	beq.n	486 <_sercom_get_default_pad+0xe2>
     47a:	2903      	cmp	r1, #3
     47c:	d005      	beq.n	48a <_sercom_get_default_pad+0xe6>
	return 0;
     47e:	2000      	movs	r0, #0
     480:	e79e      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     482:	481e      	ldr	r0, [pc, #120]	; (4fc <_sercom_get_default_pad+0x158>)
     484:	e79c      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     486:	481e      	ldr	r0, [pc, #120]	; (500 <_sercom_get_default_pad+0x15c>)
     488:	e79a      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     48a:	481e      	ldr	r0, [pc, #120]	; (504 <_sercom_get_default_pad+0x160>)
     48c:	e798      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     48e:	481e      	ldr	r0, [pc, #120]	; (508 <_sercom_get_default_pad+0x164>)
     490:	e796      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     492:	2003      	movs	r0, #3
     494:	e794      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     496:	481d      	ldr	r0, [pc, #116]	; (50c <_sercom_get_default_pad+0x168>)
     498:	e792      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     49a:	481d      	ldr	r0, [pc, #116]	; (510 <_sercom_get_default_pad+0x16c>)
     49c:	e790      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     49e:	481d      	ldr	r0, [pc, #116]	; (514 <_sercom_get_default_pad+0x170>)
     4a0:	e78e      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     4a2:	481d      	ldr	r0, [pc, #116]	; (518 <_sercom_get_default_pad+0x174>)
     4a4:	e78c      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	42001000 	.word	0x42001000
     4ac:	42001800 	.word	0x42001800
     4b0:	42001c00 	.word	0x42001c00
     4b4:	42001400 	.word	0x42001400
     4b8:	42000800 	.word	0x42000800
     4bc:	42000c00 	.word	0x42000c00
     4c0:	00050003 	.word	0x00050003
     4c4:	00060003 	.word	0x00060003
     4c8:	00070003 	.word	0x00070003
     4cc:	00010003 	.word	0x00010003
     4d0:	001e0003 	.word	0x001e0003
     4d4:	001f0003 	.word	0x001f0003
     4d8:	000d0002 	.word	0x000d0002
     4dc:	000e0002 	.word	0x000e0002
     4e0:	000f0002 	.word	0x000f0002
     4e4:	00110003 	.word	0x00110003
     4e8:	00120003 	.word	0x00120003
     4ec:	00130003 	.word	0x00130003
     4f0:	003f0005 	.word	0x003f0005
     4f4:	003e0005 	.word	0x003e0005
     4f8:	00520005 	.word	0x00520005
     4fc:	00170003 	.word	0x00170003
     500:	00180003 	.word	0x00180003
     504:	00190003 	.word	0x00190003
     508:	00040003 	.word	0x00040003
     50c:	000c0002 	.word	0x000c0002
     510:	00100003 	.word	0x00100003
     514:	00530005 	.word	0x00530005
     518:	00160003 	.word	0x00160003

0000051c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     51c:	b530      	push	{r4, r5, lr}
     51e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     520:	4b0b      	ldr	r3, [pc, #44]	; (550 <_sercom_get_sercom_inst_index+0x34>)
     522:	466a      	mov	r2, sp
     524:	cb32      	ldmia	r3!, {r1, r4, r5}
     526:	c232      	stmia	r2!, {r1, r4, r5}
     528:	cb32      	ldmia	r3!, {r1, r4, r5}
     52a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     52c:	9b00      	ldr	r3, [sp, #0]
     52e:	4283      	cmp	r3, r0
     530:	d00b      	beq.n	54a <_sercom_get_sercom_inst_index+0x2e>
     532:	2301      	movs	r3, #1
     534:	009a      	lsls	r2, r3, #2
     536:	4669      	mov	r1, sp
     538:	5852      	ldr	r2, [r2, r1]
     53a:	4282      	cmp	r2, r0
     53c:	d006      	beq.n	54c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     53e:	3301      	adds	r3, #1
     540:	2b06      	cmp	r3, #6
     542:	d1f7      	bne.n	534 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     544:	2000      	movs	r0, #0
}
     546:	b007      	add	sp, #28
     548:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     54a:	2300      	movs	r3, #0
			return i;
     54c:	b2d8      	uxtb	r0, r3
     54e:	e7fa      	b.n	546 <_sercom_get_sercom_inst_index+0x2a>
     550:	000020e8 	.word	0x000020e8

00000554 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     554:	4770      	bx	lr
	...

00000558 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     558:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     55a:	4b0a      	ldr	r3, [pc, #40]	; (584 <_sercom_set_handler+0x2c>)
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	2b00      	cmp	r3, #0
     560:	d10c      	bne.n	57c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     562:	4f09      	ldr	r7, [pc, #36]	; (588 <_sercom_set_handler+0x30>)
     564:	4e09      	ldr	r6, [pc, #36]	; (58c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     566:	4d0a      	ldr	r5, [pc, #40]	; (590 <_sercom_set_handler+0x38>)
     568:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     56a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     56c:	195a      	adds	r2, r3, r5
     56e:	6014      	str	r4, [r2, #0]
     570:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     572:	2b18      	cmp	r3, #24
     574:	d1f9      	bne.n	56a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     576:	2201      	movs	r2, #1
     578:	4b02      	ldr	r3, [pc, #8]	; (584 <_sercom_set_handler+0x2c>)
     57a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     57c:	0080      	lsls	r0, r0, #2
     57e:	4b02      	ldr	r3, [pc, #8]	; (588 <_sercom_set_handler+0x30>)
     580:	50c1      	str	r1, [r0, r3]
}
     582:	bdf0      	pop	{r4, r5, r6, r7, pc}
     584:	2000008e 	.word	0x2000008e
     588:	20000090 	.word	0x20000090
     58c:	00000555 	.word	0x00000555
     590:	200000cc 	.word	0x200000cc

00000594 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     594:	b500      	push	{lr}
     596:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     598:	2309      	movs	r3, #9
     59a:	466a      	mov	r2, sp
     59c:	7013      	strb	r3, [r2, #0]
     59e:	3301      	adds	r3, #1
     5a0:	7053      	strb	r3, [r2, #1]
     5a2:	3301      	adds	r3, #1
     5a4:	7093      	strb	r3, [r2, #2]
     5a6:	3301      	adds	r3, #1
     5a8:	70d3      	strb	r3, [r2, #3]
     5aa:	3301      	adds	r3, #1
     5ac:	7113      	strb	r3, [r2, #4]
     5ae:	3301      	adds	r3, #1
     5b0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     5b2:	4b03      	ldr	r3, [pc, #12]	; (5c0 <_sercom_get_interrupt_vector+0x2c>)
     5b4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     5b6:	466b      	mov	r3, sp
     5b8:	5618      	ldrsb	r0, [r3, r0]
}
     5ba:	b003      	add	sp, #12
     5bc:	bd00      	pop	{pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	0000051d 	.word	0x0000051d

000005c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     5c4:	b510      	push	{r4, lr}
     5c6:	4b02      	ldr	r3, [pc, #8]	; (5d0 <SERCOM0_Handler+0xc>)
     5c8:	681b      	ldr	r3, [r3, #0]
     5ca:	2000      	movs	r0, #0
     5cc:	4798      	blx	r3
     5ce:	bd10      	pop	{r4, pc}
     5d0:	20000090 	.word	0x20000090

000005d4 <SERCOM1_Handler>:
     5d4:	b510      	push	{r4, lr}
     5d6:	4b02      	ldr	r3, [pc, #8]	; (5e0 <SERCOM1_Handler+0xc>)
     5d8:	685b      	ldr	r3, [r3, #4]
     5da:	2001      	movs	r0, #1
     5dc:	4798      	blx	r3
     5de:	bd10      	pop	{r4, pc}
     5e0:	20000090 	.word	0x20000090

000005e4 <SERCOM2_Handler>:
     5e4:	b510      	push	{r4, lr}
     5e6:	4b02      	ldr	r3, [pc, #8]	; (5f0 <SERCOM2_Handler+0xc>)
     5e8:	689b      	ldr	r3, [r3, #8]
     5ea:	2002      	movs	r0, #2
     5ec:	4798      	blx	r3
     5ee:	bd10      	pop	{r4, pc}
     5f0:	20000090 	.word	0x20000090

000005f4 <SERCOM3_Handler>:
     5f4:	b510      	push	{r4, lr}
     5f6:	4b02      	ldr	r3, [pc, #8]	; (600 <SERCOM3_Handler+0xc>)
     5f8:	68db      	ldr	r3, [r3, #12]
     5fa:	2003      	movs	r0, #3
     5fc:	4798      	blx	r3
     5fe:	bd10      	pop	{r4, pc}
     600:	20000090 	.word	0x20000090

00000604 <SERCOM4_Handler>:
     604:	b510      	push	{r4, lr}
     606:	4b02      	ldr	r3, [pc, #8]	; (610 <SERCOM4_Handler+0xc>)
     608:	691b      	ldr	r3, [r3, #16]
     60a:	2004      	movs	r0, #4
     60c:	4798      	blx	r3
     60e:	bd10      	pop	{r4, pc}
     610:	20000090 	.word	0x20000090

00000614 <SERCOM5_Handler>:
     614:	b510      	push	{r4, lr}
     616:	4b02      	ldr	r3, [pc, #8]	; (620 <SERCOM5_Handler+0xc>)
     618:	695b      	ldr	r3, [r3, #20]
     61a:	2005      	movs	r0, #5
     61c:	4798      	blx	r3
     61e:	bd10      	pop	{r4, pc}
     620:	20000090 	.word	0x20000090

00000624 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     624:	b5f0      	push	{r4, r5, r6, r7, lr}
     626:	46de      	mov	lr, fp
     628:	4657      	mov	r7, sl
     62a:	464e      	mov	r6, r9
     62c:	4645      	mov	r5, r8
     62e:	b5e0      	push	{r5, r6, r7, lr}
     630:	b091      	sub	sp, #68	; 0x44
     632:	0005      	movs	r5, r0
     634:	000c      	movs	r4, r1
     636:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     638:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     63a:	0008      	movs	r0, r1
     63c:	4bbc      	ldr	r3, [pc, #752]	; (930 <usart_init+0x30c>)
     63e:	4798      	blx	r3
     640:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     642:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     644:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     646:	07db      	lsls	r3, r3, #31
     648:	d506      	bpl.n	658 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     64a:	b011      	add	sp, #68	; 0x44
     64c:	bc3c      	pop	{r2, r3, r4, r5}
     64e:	4690      	mov	r8, r2
     650:	4699      	mov	r9, r3
     652:	46a2      	mov	sl, r4
     654:	46ab      	mov	fp, r5
     656:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     658:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     65a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     65c:	079b      	lsls	r3, r3, #30
     65e:	d4f4      	bmi.n	64a <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     660:	49b4      	ldr	r1, [pc, #720]	; (934 <usart_init+0x310>)
     662:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     664:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     666:	2301      	movs	r3, #1
     668:	40bb      	lsls	r3, r7
     66a:	4303      	orrs	r3, r0
     66c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     66e:	a90f      	add	r1, sp, #60	; 0x3c
     670:	272d      	movs	r7, #45	; 0x2d
     672:	5df3      	ldrb	r3, [r6, r7]
     674:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     676:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     678:	b2d3      	uxtb	r3, r2
     67a:	9302      	str	r3, [sp, #8]
     67c:	0018      	movs	r0, r3
     67e:	4bae      	ldr	r3, [pc, #696]	; (938 <usart_init+0x314>)
     680:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     682:	9802      	ldr	r0, [sp, #8]
     684:	4bad      	ldr	r3, [pc, #692]	; (93c <usart_init+0x318>)
     686:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     688:	5df0      	ldrb	r0, [r6, r7]
     68a:	2100      	movs	r1, #0
     68c:	4bac      	ldr	r3, [pc, #688]	; (940 <usart_init+0x31c>)
     68e:	4798      	blx	r3
	module->character_size = config->character_size;
     690:	7af3      	ldrb	r3, [r6, #11]
     692:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     694:	2324      	movs	r3, #36	; 0x24
     696:	5cf3      	ldrb	r3, [r6, r3]
     698:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     69a:	2325      	movs	r3, #37	; 0x25
     69c:	5cf3      	ldrb	r3, [r6, r3]
     69e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     6a0:	7ef3      	ldrb	r3, [r6, #27]
     6a2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     6a4:	7f33      	ldrb	r3, [r6, #28]
     6a6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6a8:	682b      	ldr	r3, [r5, #0]
     6aa:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6ac:	0018      	movs	r0, r3
     6ae:	4ba0      	ldr	r3, [pc, #640]	; (930 <usart_init+0x30c>)
     6b0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6b2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     6b4:	2200      	movs	r2, #0
     6b6:	230e      	movs	r3, #14
     6b8:	a906      	add	r1, sp, #24
     6ba:	468c      	mov	ip, r1
     6bc:	4463      	add	r3, ip
     6be:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     6c0:	8a32      	ldrh	r2, [r6, #16]
     6c2:	9202      	str	r2, [sp, #8]
     6c4:	2380      	movs	r3, #128	; 0x80
     6c6:	01db      	lsls	r3, r3, #7
     6c8:	429a      	cmp	r2, r3
     6ca:	d100      	bne.n	6ce <usart_init+0xaa>
     6cc:	e09e      	b.n	80c <usart_init+0x1e8>
     6ce:	d90f      	bls.n	6f0 <usart_init+0xcc>
     6d0:	23c0      	movs	r3, #192	; 0xc0
     6d2:	01db      	lsls	r3, r3, #7
     6d4:	9a02      	ldr	r2, [sp, #8]
     6d6:	429a      	cmp	r2, r3
     6d8:	d100      	bne.n	6dc <usart_init+0xb8>
     6da:	e092      	b.n	802 <usart_init+0x1de>
     6dc:	2380      	movs	r3, #128	; 0x80
     6de:	021b      	lsls	r3, r3, #8
     6e0:	429a      	cmp	r2, r3
     6e2:	d000      	beq.n	6e6 <usart_init+0xc2>
     6e4:	e11f      	b.n	926 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     6e6:	2303      	movs	r3, #3
     6e8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     6ea:	2300      	movs	r3, #0
     6ec:	9307      	str	r3, [sp, #28]
     6ee:	e008      	b.n	702 <usart_init+0xde>
	switch (config->sample_rate) {
     6f0:	2380      	movs	r3, #128	; 0x80
     6f2:	019b      	lsls	r3, r3, #6
     6f4:	429a      	cmp	r2, r3
     6f6:	d000      	beq.n	6fa <usart_init+0xd6>
     6f8:	e115      	b.n	926 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     6fa:	2310      	movs	r3, #16
     6fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     6fe:	3b0f      	subs	r3, #15
     700:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     702:	6833      	ldr	r3, [r6, #0]
     704:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     706:	68f3      	ldr	r3, [r6, #12]
     708:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     70a:	6973      	ldr	r3, [r6, #20]
     70c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     70e:	7e33      	ldrb	r3, [r6, #24]
     710:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     712:	2326      	movs	r3, #38	; 0x26
     714:	5cf3      	ldrb	r3, [r6, r3]
     716:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     718:	6873      	ldr	r3, [r6, #4]
     71a:	4699      	mov	r9, r3
	switch (transfer_mode)
     71c:	2b00      	cmp	r3, #0
     71e:	d100      	bne.n	722 <usart_init+0xfe>
     720:	e0a0      	b.n	864 <usart_init+0x240>
     722:	2380      	movs	r3, #128	; 0x80
     724:	055b      	lsls	r3, r3, #21
     726:	4599      	cmp	r9, r3
     728:	d100      	bne.n	72c <usart_init+0x108>
     72a:	e084      	b.n	836 <usart_init+0x212>
	if(config->encoding_format_enable) {
     72c:	7e73      	ldrb	r3, [r6, #25]
     72e:	2b00      	cmp	r3, #0
     730:	d002      	beq.n	738 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     732:	7eb3      	ldrb	r3, [r6, #26]
     734:	4642      	mov	r2, r8
     736:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     738:	682a      	ldr	r2, [r5, #0]
     73a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     73c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     73e:	2b00      	cmp	r3, #0
     740:	d1fc      	bne.n	73c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     742:	330e      	adds	r3, #14
     744:	aa06      	add	r2, sp, #24
     746:	4694      	mov	ip, r2
     748:	4463      	add	r3, ip
     74a:	881b      	ldrh	r3, [r3, #0]
     74c:	4642      	mov	r2, r8
     74e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     750:	9b05      	ldr	r3, [sp, #20]
     752:	9a03      	ldr	r2, [sp, #12]
     754:	4313      	orrs	r3, r2
     756:	9a04      	ldr	r2, [sp, #16]
     758:	4313      	orrs	r3, r2
     75a:	464a      	mov	r2, r9
     75c:	4313      	orrs	r3, r2
     75e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     760:	465b      	mov	r3, fp
     762:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     764:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     766:	4653      	mov	r3, sl
     768:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     76a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     76c:	2327      	movs	r3, #39	; 0x27
     76e:	5cf3      	ldrb	r3, [r6, r3]
     770:	2b00      	cmp	r3, #0
     772:	d101      	bne.n	778 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     774:	3304      	adds	r3, #4
     776:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     778:	7e73      	ldrb	r3, [r6, #25]
     77a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     77c:	7f32      	ldrb	r2, [r6, #28]
     77e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     780:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     782:	7f72      	ldrb	r2, [r6, #29]
     784:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     786:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     788:	2224      	movs	r2, #36	; 0x24
     78a:	5cb2      	ldrb	r2, [r6, r2]
     78c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     78e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     790:	2225      	movs	r2, #37	; 0x25
     792:	5cb2      	ldrb	r2, [r6, r2]
     794:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     796:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     798:	7ab1      	ldrb	r1, [r6, #10]
     79a:	7af2      	ldrb	r2, [r6, #11]
     79c:	4311      	orrs	r1, r2
     79e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     7a0:	8933      	ldrh	r3, [r6, #8]
     7a2:	2bff      	cmp	r3, #255	; 0xff
     7a4:	d100      	bne.n	7a8 <usart_init+0x184>
     7a6:	e081      	b.n	8ac <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     7a8:	2280      	movs	r2, #128	; 0x80
     7aa:	0452      	lsls	r2, r2, #17
     7ac:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     7ae:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     7b0:	232c      	movs	r3, #44	; 0x2c
     7b2:	5cf3      	ldrb	r3, [r6, r3]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d103      	bne.n	7c0 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7b8:	4b62      	ldr	r3, [pc, #392]	; (944 <usart_init+0x320>)
     7ba:	789b      	ldrb	r3, [r3, #2]
     7bc:	079b      	lsls	r3, r3, #30
     7be:	d501      	bpl.n	7c4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     7c0:	2380      	movs	r3, #128	; 0x80
     7c2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     7c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     7c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7c8:	2b00      	cmp	r3, #0
     7ca:	d1fc      	bne.n	7c6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     7cc:	4643      	mov	r3, r8
     7ce:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7d0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     7d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7d4:	2b00      	cmp	r3, #0
     7d6:	d1fc      	bne.n	7d2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     7d8:	4643      	mov	r3, r8
     7da:	601f      	str	r7, [r3, #0]
     7dc:	ab0e      	add	r3, sp, #56	; 0x38
     7de:	2280      	movs	r2, #128	; 0x80
     7e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7e2:	2200      	movs	r2, #0
     7e4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     7e6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7e8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     7ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
     7ec:	930a      	str	r3, [sp, #40]	; 0x28
     7ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
     7f0:	930b      	str	r3, [sp, #44]	; 0x2c
     7f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     7f4:	930c      	str	r3, [sp, #48]	; 0x30
     7f6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     7f8:	9302      	str	r3, [sp, #8]
     7fa:	930d      	str	r3, [sp, #52]	; 0x34
     7fc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7fe:	ae0a      	add	r6, sp, #40	; 0x28
     800:	e063      	b.n	8ca <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     802:	2308      	movs	r3, #8
     804:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     806:	3b07      	subs	r3, #7
     808:	9307      	str	r3, [sp, #28]
     80a:	e77a      	b.n	702 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     80c:	6833      	ldr	r3, [r6, #0]
     80e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     810:	68f3      	ldr	r3, [r6, #12]
     812:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     814:	6973      	ldr	r3, [r6, #20]
     816:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     818:	7e33      	ldrb	r3, [r6, #24]
     81a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     81c:	2326      	movs	r3, #38	; 0x26
     81e:	5cf3      	ldrb	r3, [r6, r3]
     820:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     822:	6873      	ldr	r3, [r6, #4]
     824:	4699      	mov	r9, r3
	switch (transfer_mode)
     826:	2b00      	cmp	r3, #0
     828:	d018      	beq.n	85c <usart_init+0x238>
     82a:	2380      	movs	r3, #128	; 0x80
     82c:	055b      	lsls	r3, r3, #21
     82e:	4599      	cmp	r9, r3
     830:	d001      	beq.n	836 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     832:	2000      	movs	r0, #0
     834:	e025      	b.n	882 <usart_init+0x25e>
			if (!config->use_external_clock) {
     836:	2327      	movs	r3, #39	; 0x27
     838:	5cf3      	ldrb	r3, [r6, r3]
     83a:	2b00      	cmp	r3, #0
     83c:	d000      	beq.n	840 <usart_init+0x21c>
     83e:	e775      	b.n	72c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     840:	6a33      	ldr	r3, [r6, #32]
     842:	001f      	movs	r7, r3
     844:	b2c0      	uxtb	r0, r0
     846:	4b40      	ldr	r3, [pc, #256]	; (948 <usart_init+0x324>)
     848:	4798      	blx	r3
     84a:	0001      	movs	r1, r0
     84c:	220e      	movs	r2, #14
     84e:	ab06      	add	r3, sp, #24
     850:	469c      	mov	ip, r3
     852:	4462      	add	r2, ip
     854:	0038      	movs	r0, r7
     856:	4b3d      	ldr	r3, [pc, #244]	; (94c <usart_init+0x328>)
     858:	4798      	blx	r3
     85a:	e012      	b.n	882 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     85c:	2308      	movs	r3, #8
     85e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     860:	2300      	movs	r3, #0
     862:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     864:	2327      	movs	r3, #39	; 0x27
     866:	5cf3      	ldrb	r3, [r6, r3]
     868:	2b00      	cmp	r3, #0
     86a:	d00e      	beq.n	88a <usart_init+0x266>
				status_code =
     86c:	9b06      	ldr	r3, [sp, #24]
     86e:	9300      	str	r3, [sp, #0]
     870:	9b07      	ldr	r3, [sp, #28]
     872:	220e      	movs	r2, #14
     874:	a906      	add	r1, sp, #24
     876:	468c      	mov	ip, r1
     878:	4462      	add	r2, ip
     87a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     87c:	6a30      	ldr	r0, [r6, #32]
     87e:	4f34      	ldr	r7, [pc, #208]	; (950 <usart_init+0x32c>)
     880:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     882:	2800      	cmp	r0, #0
     884:	d000      	beq.n	888 <usart_init+0x264>
     886:	e6e0      	b.n	64a <usart_init+0x26>
     888:	e750      	b.n	72c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     88a:	6a33      	ldr	r3, [r6, #32]
     88c:	001f      	movs	r7, r3
     88e:	b2c0      	uxtb	r0, r0
     890:	4b2d      	ldr	r3, [pc, #180]	; (948 <usart_init+0x324>)
     892:	4798      	blx	r3
     894:	0001      	movs	r1, r0
				status_code =
     896:	9b06      	ldr	r3, [sp, #24]
     898:	9300      	str	r3, [sp, #0]
     89a:	9b07      	ldr	r3, [sp, #28]
     89c:	220e      	movs	r2, #14
     89e:	a806      	add	r0, sp, #24
     8a0:	4684      	mov	ip, r0
     8a2:	4462      	add	r2, ip
     8a4:	0038      	movs	r0, r7
     8a6:	4f2a      	ldr	r7, [pc, #168]	; (950 <usart_init+0x32c>)
     8a8:	47b8      	blx	r7
     8aa:	e7ea      	b.n	882 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     8ac:	7ef3      	ldrb	r3, [r6, #27]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d100      	bne.n	8b4 <usart_init+0x290>
     8b2:	e77d      	b.n	7b0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     8b4:	2380      	movs	r3, #128	; 0x80
     8b6:	04db      	lsls	r3, r3, #19
     8b8:	431f      	orrs	r7, r3
     8ba:	e779      	b.n	7b0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     8bc:	0020      	movs	r0, r4
     8be:	4b25      	ldr	r3, [pc, #148]	; (954 <usart_init+0x330>)
     8c0:	4798      	blx	r3
     8c2:	e007      	b.n	8d4 <usart_init+0x2b0>
     8c4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     8c6:	2f04      	cmp	r7, #4
     8c8:	d00d      	beq.n	8e6 <usart_init+0x2c2>
     8ca:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8cc:	00bb      	lsls	r3, r7, #2
     8ce:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     8d0:	2800      	cmp	r0, #0
     8d2:	d0f3      	beq.n	8bc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     8d4:	1c43      	adds	r3, r0, #1
     8d6:	d0f5      	beq.n	8c4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     8d8:	a90e      	add	r1, sp, #56	; 0x38
     8da:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     8dc:	0c00      	lsrs	r0, r0, #16
     8de:	b2c0      	uxtb	r0, r0
     8e0:	4b1d      	ldr	r3, [pc, #116]	; (958 <usart_init+0x334>)
     8e2:	4798      	blx	r3
     8e4:	e7ee      	b.n	8c4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     8e6:	2300      	movs	r3, #0
     8e8:	60eb      	str	r3, [r5, #12]
     8ea:	612b      	str	r3, [r5, #16]
     8ec:	616b      	str	r3, [r5, #20]
     8ee:	61ab      	str	r3, [r5, #24]
     8f0:	61eb      	str	r3, [r5, #28]
     8f2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     8f4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     8f6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     8f8:	2200      	movs	r2, #0
     8fa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     8fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     8fe:	3330      	adds	r3, #48	; 0x30
     900:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     902:	3301      	adds	r3, #1
     904:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     906:	3301      	adds	r3, #1
     908:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     90a:	3301      	adds	r3, #1
     90c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     90e:	6828      	ldr	r0, [r5, #0]
     910:	4b07      	ldr	r3, [pc, #28]	; (930 <usart_init+0x30c>)
     912:	4798      	blx	r3
     914:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     916:	4911      	ldr	r1, [pc, #68]	; (95c <usart_init+0x338>)
     918:	4b11      	ldr	r3, [pc, #68]	; (960 <usart_init+0x33c>)
     91a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     91c:	00a4      	lsls	r4, r4, #2
     91e:	4b11      	ldr	r3, [pc, #68]	; (964 <usart_init+0x340>)
     920:	50e5      	str	r5, [r4, r3]
	return status_code;
     922:	2000      	movs	r0, #0
     924:	e691      	b.n	64a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     926:	2310      	movs	r3, #16
     928:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     92a:	2300      	movs	r3, #0
     92c:	9307      	str	r3, [sp, #28]
     92e:	e6e8      	b.n	702 <usart_init+0xde>
     930:	0000051d 	.word	0x0000051d
     934:	40000400 	.word	0x40000400
     938:	00000fdd 	.word	0x00000fdd
     93c:	00000f51 	.word	0x00000f51
     940:	00000359 	.word	0x00000359
     944:	41002000 	.word	0x41002000
     948:	00000ff9 	.word	0x00000ff9
     94c:	0000029b 	.word	0x0000029b
     950:	000002c5 	.word	0x000002c5
     954:	000003a5 	.word	0x000003a5
     958:	000010d5 	.word	0x000010d5
     95c:	00000a05 	.word	0x00000a05
     960:	00000559 	.word	0x00000559
     964:	200000cc 	.word	0x200000cc

00000968 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     968:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     96a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     96c:	2a00      	cmp	r2, #0
     96e:	d101      	bne.n	974 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     970:	0018      	movs	r0, r3
     972:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     974:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     976:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     978:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     97a:	2a00      	cmp	r2, #0
     97c:	d1f8      	bne.n	970 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     97e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     980:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     982:	2a00      	cmp	r2, #0
     984:	d1fc      	bne.n	980 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     986:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     988:	2102      	movs	r1, #2
     98a:	7e1a      	ldrb	r2, [r3, #24]
     98c:	420a      	tst	r2, r1
     98e:	d0fc      	beq.n	98a <usart_write_wait+0x22>
	return STATUS_OK;
     990:	2300      	movs	r3, #0
     992:	e7ed      	b.n	970 <usart_write_wait+0x8>

00000994 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     994:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     996:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     998:	2a00      	cmp	r2, #0
     99a:	d101      	bne.n	9a0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     99c:	0018      	movs	r0, r3
     99e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     9a0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     9a2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     9a4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     9a6:	2a00      	cmp	r2, #0
     9a8:	d1f8      	bne.n	99c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9aa:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     9ac:	7e10      	ldrb	r0, [r2, #24]
     9ae:	0740      	lsls	r0, r0, #29
     9b0:	d5f4      	bpl.n	99c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     9b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9b4:	2b00      	cmp	r3, #0
     9b6:	d1fc      	bne.n	9b2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9b8:	8b53      	ldrh	r3, [r2, #26]
     9ba:	b2db      	uxtb	r3, r3
	if (error_code) {
     9bc:	0698      	lsls	r0, r3, #26
     9be:	d01d      	beq.n	9fc <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     9c0:	0798      	lsls	r0, r3, #30
     9c2:	d503      	bpl.n	9cc <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     9c4:	2302      	movs	r3, #2
     9c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     9c8:	3318      	adds	r3, #24
     9ca:	e7e7      	b.n	99c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9cc:	0758      	lsls	r0, r3, #29
     9ce:	d503      	bpl.n	9d8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     9d0:	2304      	movs	r3, #4
     9d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     9d4:	331a      	adds	r3, #26
     9d6:	e7e1      	b.n	99c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     9d8:	07d8      	lsls	r0, r3, #31
     9da:	d503      	bpl.n	9e4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     9dc:	2301      	movs	r3, #1
     9de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     9e0:	3312      	adds	r3, #18
     9e2:	e7db      	b.n	99c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     9e4:	06d8      	lsls	r0, r3, #27
     9e6:	d503      	bpl.n	9f0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     9e8:	2310      	movs	r3, #16
     9ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     9ec:	3332      	adds	r3, #50	; 0x32
     9ee:	e7d5      	b.n	99c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     9f0:	069b      	lsls	r3, r3, #26
     9f2:	d503      	bpl.n	9fc <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     9f4:	2320      	movs	r3, #32
     9f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     9f8:	3321      	adds	r3, #33	; 0x21
     9fa:	e7cf      	b.n	99c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     9fc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     9fe:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     a00:	2300      	movs	r3, #0
     a02:	e7cb      	b.n	99c <usart_read_wait+0x8>

00000a04 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a06:	0080      	lsls	r0, r0, #2
     a08:	4b62      	ldr	r3, [pc, #392]	; (b94 <_usart_interrupt_handler+0x190>)
     a0a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a0c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a0e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     a10:	2b00      	cmp	r3, #0
     a12:	d1fc      	bne.n	a0e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a14:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     a16:	7da6      	ldrb	r6, [r4, #22]
     a18:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     a1a:	2330      	movs	r3, #48	; 0x30
     a1c:	5ceb      	ldrb	r3, [r5, r3]
     a1e:	2231      	movs	r2, #49	; 0x31
     a20:	5caf      	ldrb	r7, [r5, r2]
     a22:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a24:	07f3      	lsls	r3, r6, #31
     a26:	d522      	bpl.n	a6e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     a28:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a2a:	b29b      	uxth	r3, r3
     a2c:	2b00      	cmp	r3, #0
     a2e:	d01c      	beq.n	a6a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a32:	7813      	ldrb	r3, [r2, #0]
     a34:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a36:	1c51      	adds	r1, r2, #1
     a38:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a3a:	7969      	ldrb	r1, [r5, #5]
     a3c:	2901      	cmp	r1, #1
     a3e:	d00e      	beq.n	a5e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a40:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a42:	05db      	lsls	r3, r3, #23
     a44:	0ddb      	lsrs	r3, r3, #23
     a46:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a4a:	3b01      	subs	r3, #1
     a4c:	b29b      	uxth	r3, r3
     a4e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a50:	2b00      	cmp	r3, #0
     a52:	d10c      	bne.n	a6e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a54:	3301      	adds	r3, #1
     a56:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a58:	3301      	adds	r3, #1
     a5a:	75a3      	strb	r3, [r4, #22]
     a5c:	e007      	b.n	a6e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     a5e:	7851      	ldrb	r1, [r2, #1]
     a60:	0209      	lsls	r1, r1, #8
     a62:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     a64:	3202      	adds	r2, #2
     a66:	62aa      	str	r2, [r5, #40]	; 0x28
     a68:	e7eb      	b.n	a42 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a6a:	2301      	movs	r3, #1
     a6c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a6e:	07b3      	lsls	r3, r6, #30
     a70:	d506      	bpl.n	a80 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a72:	2302      	movs	r3, #2
     a74:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a76:	2200      	movs	r2, #0
     a78:	3331      	adds	r3, #49	; 0x31
     a7a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a7c:	07fb      	lsls	r3, r7, #31
     a7e:	d41a      	bmi.n	ab6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a80:	0773      	lsls	r3, r6, #29
     a82:	d565      	bpl.n	b50 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     a84:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a86:	b29b      	uxth	r3, r3
     a88:	2b00      	cmp	r3, #0
     a8a:	d05f      	beq.n	b4c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a8c:	8b63      	ldrh	r3, [r4, #26]
     a8e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a90:	071a      	lsls	r2, r3, #28
     a92:	d414      	bmi.n	abe <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a94:	223f      	movs	r2, #63	; 0x3f
     a96:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a98:	2b00      	cmp	r3, #0
     a9a:	d034      	beq.n	b06 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a9c:	079a      	lsls	r2, r3, #30
     a9e:	d511      	bpl.n	ac4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     aa0:	221a      	movs	r2, #26
     aa2:	2332      	movs	r3, #50	; 0x32
     aa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     aa6:	3b30      	subs	r3, #48	; 0x30
     aa8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     aaa:	077b      	lsls	r3, r7, #29
     aac:	d550      	bpl.n	b50 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     aae:	0028      	movs	r0, r5
     ab0:	696b      	ldr	r3, [r5, #20]
     ab2:	4798      	blx	r3
     ab4:	e04c      	b.n	b50 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     ab6:	0028      	movs	r0, r5
     ab8:	68eb      	ldr	r3, [r5, #12]
     aba:	4798      	blx	r3
     abc:	e7e0      	b.n	a80 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     abe:	2237      	movs	r2, #55	; 0x37
     ac0:	4013      	ands	r3, r2
     ac2:	e7e9      	b.n	a98 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ac4:	075a      	lsls	r2, r3, #29
     ac6:	d505      	bpl.n	ad4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     ac8:	221e      	movs	r2, #30
     aca:	2332      	movs	r3, #50	; 0x32
     acc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ace:	3b2e      	subs	r3, #46	; 0x2e
     ad0:	8363      	strh	r3, [r4, #26]
     ad2:	e7ea      	b.n	aaa <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ad4:	07da      	lsls	r2, r3, #31
     ad6:	d505      	bpl.n	ae4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     ad8:	2213      	movs	r2, #19
     ada:	2332      	movs	r3, #50	; 0x32
     adc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     ade:	3b31      	subs	r3, #49	; 0x31
     ae0:	8363      	strh	r3, [r4, #26]
     ae2:	e7e2      	b.n	aaa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     ae4:	06da      	lsls	r2, r3, #27
     ae6:	d505      	bpl.n	af4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ae8:	2242      	movs	r2, #66	; 0x42
     aea:	2332      	movs	r3, #50	; 0x32
     aec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     aee:	3b22      	subs	r3, #34	; 0x22
     af0:	8363      	strh	r3, [r4, #26]
     af2:	e7da      	b.n	aaa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     af4:	2220      	movs	r2, #32
     af6:	421a      	tst	r2, r3
     af8:	d0d7      	beq.n	aaa <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     afa:	3221      	adds	r2, #33	; 0x21
     afc:	2332      	movs	r3, #50	; 0x32
     afe:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b00:	3b12      	subs	r3, #18
     b02:	8363      	strh	r3, [r4, #26]
     b04:	e7d1      	b.n	aaa <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b08:	05db      	lsls	r3, r3, #23
     b0a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     b0c:	b2da      	uxtb	r2, r3
     b0e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     b10:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     b12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     b14:	1c51      	adds	r1, r2, #1
     b16:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b18:	7969      	ldrb	r1, [r5, #5]
     b1a:	2901      	cmp	r1, #1
     b1c:	d010      	beq.n	b40 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     b1e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b20:	3b01      	subs	r3, #1
     b22:	b29b      	uxth	r3, r3
     b24:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b26:	2b00      	cmp	r3, #0
     b28:	d112      	bne.n	b50 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b2a:	3304      	adds	r3, #4
     b2c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     b2e:	2200      	movs	r2, #0
     b30:	332e      	adds	r3, #46	; 0x2e
     b32:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     b34:	07bb      	lsls	r3, r7, #30
     b36:	d50b      	bpl.n	b50 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b38:	0028      	movs	r0, r5
     b3a:	692b      	ldr	r3, [r5, #16]
     b3c:	4798      	blx	r3
     b3e:	e007      	b.n	b50 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b40:	0a1b      	lsrs	r3, r3, #8
     b42:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b46:	3301      	adds	r3, #1
     b48:	626b      	str	r3, [r5, #36]	; 0x24
     b4a:	e7e8      	b.n	b1e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b4c:	2304      	movs	r3, #4
     b4e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     b50:	06f3      	lsls	r3, r6, #27
     b52:	d504      	bpl.n	b5e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     b54:	2310      	movs	r3, #16
     b56:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     b58:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     b5a:	06fb      	lsls	r3, r7, #27
     b5c:	d40e      	bmi.n	b7c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     b5e:	06b3      	lsls	r3, r6, #26
     b60:	d504      	bpl.n	b6c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     b62:	2320      	movs	r3, #32
     b64:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     b66:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b68:	073b      	lsls	r3, r7, #28
     b6a:	d40b      	bmi.n	b84 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b6c:	0733      	lsls	r3, r6, #28
     b6e:	d504      	bpl.n	b7a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b70:	2308      	movs	r3, #8
     b72:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b74:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b76:	06bb      	lsls	r3, r7, #26
     b78:	d408      	bmi.n	b8c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     b7c:	0028      	movs	r0, r5
     b7e:	69eb      	ldr	r3, [r5, #28]
     b80:	4798      	blx	r3
     b82:	e7ec      	b.n	b5e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b84:	0028      	movs	r0, r5
     b86:	69ab      	ldr	r3, [r5, #24]
     b88:	4798      	blx	r3
     b8a:	e7ef      	b.n	b6c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b8c:	6a2b      	ldr	r3, [r5, #32]
     b8e:	0028      	movs	r0, r5
     b90:	4798      	blx	r3
}
     b92:	e7f2      	b.n	b7a <_usart_interrupt_handler+0x176>
     b94:	200000cc 	.word	0x200000cc

00000b98 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b98:	b510      	push	{r4, lr}
	switch (clock_source) {
     b9a:	2808      	cmp	r0, #8
     b9c:	d803      	bhi.n	ba6 <system_clock_source_get_hz+0xe>
     b9e:	0080      	lsls	r0, r0, #2
     ba0:	4b1b      	ldr	r3, [pc, #108]	; (c10 <system_clock_source_get_hz+0x78>)
     ba2:	581b      	ldr	r3, [r3, r0]
     ba4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     ba6:	2000      	movs	r0, #0
     ba8:	e030      	b.n	c0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     baa:	4b1a      	ldr	r3, [pc, #104]	; (c14 <system_clock_source_get_hz+0x7c>)
     bac:	6918      	ldr	r0, [r3, #16]
     bae:	e02d      	b.n	c0c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     bb0:	4b19      	ldr	r3, [pc, #100]	; (c18 <system_clock_source_get_hz+0x80>)
     bb2:	6a1b      	ldr	r3, [r3, #32]
     bb4:	059b      	lsls	r3, r3, #22
     bb6:	0f9b      	lsrs	r3, r3, #30
     bb8:	4818      	ldr	r0, [pc, #96]	; (c1c <system_clock_source_get_hz+0x84>)
     bba:	40d8      	lsrs	r0, r3
     bbc:	e026      	b.n	c0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     bbe:	4b15      	ldr	r3, [pc, #84]	; (c14 <system_clock_source_get_hz+0x7c>)
     bc0:	6958      	ldr	r0, [r3, #20]
     bc2:	e023      	b.n	c0c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     bc4:	4b13      	ldr	r3, [pc, #76]	; (c14 <system_clock_source_get_hz+0x7c>)
     bc6:	681b      	ldr	r3, [r3, #0]
			return 0;
     bc8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     bca:	079b      	lsls	r3, r3, #30
     bcc:	d51e      	bpl.n	c0c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     bce:	4912      	ldr	r1, [pc, #72]	; (c18 <system_clock_source_get_hz+0x80>)
     bd0:	2210      	movs	r2, #16
     bd2:	68cb      	ldr	r3, [r1, #12]
     bd4:	421a      	tst	r2, r3
     bd6:	d0fc      	beq.n	bd2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     bd8:	4b0e      	ldr	r3, [pc, #56]	; (c14 <system_clock_source_get_hz+0x7c>)
     bda:	681b      	ldr	r3, [r3, #0]
     bdc:	075b      	lsls	r3, r3, #29
     bde:	d401      	bmi.n	be4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     be0:	480f      	ldr	r0, [pc, #60]	; (c20 <system_clock_source_get_hz+0x88>)
     be2:	e013      	b.n	c0c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     be4:	2000      	movs	r0, #0
     be6:	4b0f      	ldr	r3, [pc, #60]	; (c24 <system_clock_source_get_hz+0x8c>)
     be8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     bea:	4b0a      	ldr	r3, [pc, #40]	; (c14 <system_clock_source_get_hz+0x7c>)
     bec:	689b      	ldr	r3, [r3, #8]
     bee:	041b      	lsls	r3, r3, #16
     bf0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bf2:	4358      	muls	r0, r3
     bf4:	e00a      	b.n	c0c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bf6:	2350      	movs	r3, #80	; 0x50
     bf8:	4a07      	ldr	r2, [pc, #28]	; (c18 <system_clock_source_get_hz+0x80>)
     bfa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     bfc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bfe:	075b      	lsls	r3, r3, #29
     c00:	d504      	bpl.n	c0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     c02:	4b04      	ldr	r3, [pc, #16]	; (c14 <system_clock_source_get_hz+0x7c>)
     c04:	68d8      	ldr	r0, [r3, #12]
     c06:	e001      	b.n	c0c <system_clock_source_get_hz+0x74>
		return 32768UL;
     c08:	2080      	movs	r0, #128	; 0x80
     c0a:	0200      	lsls	r0, r0, #8
	}
}
     c0c:	bd10      	pop	{r4, pc}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	00002100 	.word	0x00002100
     c14:	200000a8 	.word	0x200000a8
     c18:	40000800 	.word	0x40000800
     c1c:	007a1200 	.word	0x007a1200
     c20:	02dc6c00 	.word	0x02dc6c00
     c24:	00000ff9 	.word	0x00000ff9

00000c28 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     c28:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     c2a:	490c      	ldr	r1, [pc, #48]	; (c5c <system_clock_source_osc8m_set_config+0x34>)
     c2c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     c2e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     c30:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     c32:	7840      	ldrb	r0, [r0, #1]
     c34:	2201      	movs	r2, #1
     c36:	4010      	ands	r0, r2
     c38:	0180      	lsls	r0, r0, #6
     c3a:	2640      	movs	r6, #64	; 0x40
     c3c:	43b3      	bics	r3, r6
     c3e:	4303      	orrs	r3, r0
     c40:	402a      	ands	r2, r5
     c42:	01d2      	lsls	r2, r2, #7
     c44:	2080      	movs	r0, #128	; 0x80
     c46:	4383      	bics	r3, r0
     c48:	4313      	orrs	r3, r2
     c4a:	2203      	movs	r2, #3
     c4c:	4022      	ands	r2, r4
     c4e:	0212      	lsls	r2, r2, #8
     c50:	4803      	ldr	r0, [pc, #12]	; (c60 <system_clock_source_osc8m_set_config+0x38>)
     c52:	4003      	ands	r3, r0
     c54:	4313      	orrs	r3, r2
     c56:	620b      	str	r3, [r1, #32]
}
     c58:	bd70      	pop	{r4, r5, r6, pc}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	40000800 	.word	0x40000800
     c60:	fffffcff 	.word	0xfffffcff

00000c64 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c64:	2808      	cmp	r0, #8
     c66:	d803      	bhi.n	c70 <system_clock_source_enable+0xc>
     c68:	0080      	lsls	r0, r0, #2
     c6a:	4b25      	ldr	r3, [pc, #148]	; (d00 <system_clock_source_enable+0x9c>)
     c6c:	581b      	ldr	r3, [r3, r0]
     c6e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c70:	2017      	movs	r0, #23
     c72:	e044      	b.n	cfe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c74:	4a23      	ldr	r2, [pc, #140]	; (d04 <system_clock_source_enable+0xa0>)
     c76:	6a13      	ldr	r3, [r2, #32]
     c78:	2102      	movs	r1, #2
     c7a:	430b      	orrs	r3, r1
     c7c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c7e:	2000      	movs	r0, #0
     c80:	e03d      	b.n	cfe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c82:	4a20      	ldr	r2, [pc, #128]	; (d04 <system_clock_source_enable+0xa0>)
     c84:	6993      	ldr	r3, [r2, #24]
     c86:	2102      	movs	r1, #2
     c88:	430b      	orrs	r3, r1
     c8a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     c8c:	2000      	movs	r0, #0
		break;
     c8e:	e036      	b.n	cfe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c90:	4a1c      	ldr	r2, [pc, #112]	; (d04 <system_clock_source_enable+0xa0>)
     c92:	8a13      	ldrh	r3, [r2, #16]
     c94:	2102      	movs	r1, #2
     c96:	430b      	orrs	r3, r1
     c98:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     c9a:	2000      	movs	r0, #0
		break;
     c9c:	e02f      	b.n	cfe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c9e:	4a19      	ldr	r2, [pc, #100]	; (d04 <system_clock_source_enable+0xa0>)
     ca0:	8a93      	ldrh	r3, [r2, #20]
     ca2:	2102      	movs	r1, #2
     ca4:	430b      	orrs	r3, r1
     ca6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     ca8:	2000      	movs	r0, #0
		break;
     caa:	e028      	b.n	cfe <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     cac:	4916      	ldr	r1, [pc, #88]	; (d08 <system_clock_source_enable+0xa4>)
     cae:	680b      	ldr	r3, [r1, #0]
     cb0:	2202      	movs	r2, #2
     cb2:	4313      	orrs	r3, r2
     cb4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     cb6:	4b13      	ldr	r3, [pc, #76]	; (d04 <system_clock_source_enable+0xa0>)
     cb8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     cba:	0019      	movs	r1, r3
     cbc:	320e      	adds	r2, #14
     cbe:	68cb      	ldr	r3, [r1, #12]
     cc0:	421a      	tst	r2, r3
     cc2:	d0fc      	beq.n	cbe <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     cc4:	4a10      	ldr	r2, [pc, #64]	; (d08 <system_clock_source_enable+0xa4>)
     cc6:	6891      	ldr	r1, [r2, #8]
     cc8:	4b0e      	ldr	r3, [pc, #56]	; (d04 <system_clock_source_enable+0xa0>)
     cca:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     ccc:	6852      	ldr	r2, [r2, #4]
     cce:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     cd0:	2200      	movs	r2, #0
     cd2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     cd4:	0019      	movs	r1, r3
     cd6:	3210      	adds	r2, #16
     cd8:	68cb      	ldr	r3, [r1, #12]
     cda:	421a      	tst	r2, r3
     cdc:	d0fc      	beq.n	cd8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     cde:	4b0a      	ldr	r3, [pc, #40]	; (d08 <system_clock_source_enable+0xa4>)
     ce0:	681b      	ldr	r3, [r3, #0]
     ce2:	b29b      	uxth	r3, r3
     ce4:	4a07      	ldr	r2, [pc, #28]	; (d04 <system_clock_source_enable+0xa0>)
     ce6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     ce8:	2000      	movs	r0, #0
     cea:	e008      	b.n	cfe <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     cec:	4905      	ldr	r1, [pc, #20]	; (d04 <system_clock_source_enable+0xa0>)
     cee:	2244      	movs	r2, #68	; 0x44
     cf0:	5c8b      	ldrb	r3, [r1, r2]
     cf2:	2002      	movs	r0, #2
     cf4:	4303      	orrs	r3, r0
     cf6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     cf8:	2000      	movs	r0, #0
		break;
     cfa:	e000      	b.n	cfe <system_clock_source_enable+0x9a>
		return STATUS_OK;
     cfc:	2000      	movs	r0, #0
}
     cfe:	4770      	bx	lr
     d00:	00002124 	.word	0x00002124
     d04:	40000800 	.word	0x40000800
     d08:	200000a8 	.word	0x200000a8

00000d0c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     d0c:	b530      	push	{r4, r5, lr}
     d0e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d10:	22c2      	movs	r2, #194	; 0xc2
     d12:	00d2      	lsls	r2, r2, #3
     d14:	4b1a      	ldr	r3, [pc, #104]	; (d80 <system_clock_init+0x74>)
     d16:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     d18:	4a1a      	ldr	r2, [pc, #104]	; (d84 <system_clock_init+0x78>)
     d1a:	6853      	ldr	r3, [r2, #4]
     d1c:	211e      	movs	r1, #30
     d1e:	438b      	bics	r3, r1
     d20:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     d22:	2301      	movs	r3, #1
     d24:	466a      	mov	r2, sp
     d26:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d28:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     d2a:	4d17      	ldr	r5, [pc, #92]	; (d88 <system_clock_init+0x7c>)
     d2c:	b2e0      	uxtb	r0, r4
     d2e:	4669      	mov	r1, sp
     d30:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d32:	3401      	adds	r4, #1
     d34:	2c25      	cmp	r4, #37	; 0x25
     d36:	d1f9      	bne.n	d2c <system_clock_init+0x20>
	config->run_in_standby  = false;
     d38:	a803      	add	r0, sp, #12
     d3a:	2400      	movs	r4, #0
     d3c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     d3e:	2501      	movs	r5, #1
     d40:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     d42:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d44:	4b11      	ldr	r3, [pc, #68]	; (d8c <system_clock_init+0x80>)
     d46:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d48:	2006      	movs	r0, #6
     d4a:	4b11      	ldr	r3, [pc, #68]	; (d90 <system_clock_init+0x84>)
     d4c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d4e:	4b11      	ldr	r3, [pc, #68]	; (d94 <system_clock_init+0x88>)
     d50:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     d52:	4b11      	ldr	r3, [pc, #68]	; (d98 <system_clock_init+0x8c>)
     d54:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     d56:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     d58:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     d5a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d5c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d5e:	466b      	mov	r3, sp
     d60:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d62:	2306      	movs	r3, #6
     d64:	466a      	mov	r2, sp
     d66:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     d68:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d6a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d6c:	4669      	mov	r1, sp
     d6e:	2000      	movs	r0, #0
     d70:	4b0a      	ldr	r3, [pc, #40]	; (d9c <system_clock_init+0x90>)
     d72:	4798      	blx	r3
     d74:	2000      	movs	r0, #0
     d76:	4b0a      	ldr	r3, [pc, #40]	; (da0 <system_clock_init+0x94>)
     d78:	4798      	blx	r3
#endif
}
     d7a:	b005      	add	sp, #20
     d7c:	bd30      	pop	{r4, r5, pc}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	40000800 	.word	0x40000800
     d84:	41004000 	.word	0x41004000
     d88:	00000fdd 	.word	0x00000fdd
     d8c:	00000c29 	.word	0x00000c29
     d90:	00000c65 	.word	0x00000c65
     d94:	00000da5 	.word	0x00000da5
     d98:	40000400 	.word	0x40000400
     d9c:	00000dc9 	.word	0x00000dc9
     da0:	00000e81 	.word	0x00000e81

00000da4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     da4:	4a06      	ldr	r2, [pc, #24]	; (dc0 <system_gclk_init+0x1c>)
     da6:	6993      	ldr	r3, [r2, #24]
     da8:	2108      	movs	r1, #8
     daa:	430b      	orrs	r3, r1
     dac:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     dae:	2201      	movs	r2, #1
     db0:	4b04      	ldr	r3, [pc, #16]	; (dc4 <system_gclk_init+0x20>)
     db2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     db4:	0019      	movs	r1, r3
     db6:	780b      	ldrb	r3, [r1, #0]
     db8:	4213      	tst	r3, r2
     dba:	d1fc      	bne.n	db6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     dbc:	4770      	bx	lr
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	40000400 	.word	0x40000400
     dc4:	40000c00 	.word	0x40000c00

00000dc8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     dc8:	b570      	push	{r4, r5, r6, lr}
     dca:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     dcc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     dce:	780d      	ldrb	r5, [r1, #0]
     dd0:	022d      	lsls	r5, r5, #8
     dd2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     dd4:	784b      	ldrb	r3, [r1, #1]
     dd6:	2b00      	cmp	r3, #0
     dd8:	d002      	beq.n	de0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	02db      	lsls	r3, r3, #11
     dde:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     de0:	7a4b      	ldrb	r3, [r1, #9]
     de2:	2b00      	cmp	r3, #0
     de4:	d002      	beq.n	dec <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     de6:	2380      	movs	r3, #128	; 0x80
     de8:	031b      	lsls	r3, r3, #12
     dea:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     dec:	6848      	ldr	r0, [r1, #4]
     dee:	2801      	cmp	r0, #1
     df0:	d910      	bls.n	e14 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     df2:	1e43      	subs	r3, r0, #1
     df4:	4218      	tst	r0, r3
     df6:	d134      	bne.n	e62 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     df8:	2802      	cmp	r0, #2
     dfa:	d930      	bls.n	e5e <system_gclk_gen_set_config+0x96>
     dfc:	2302      	movs	r3, #2
     dfe:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     e00:	3201      	adds	r2, #1
						mask <<= 1) {
     e02:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     e04:	4298      	cmp	r0, r3
     e06:	d8fb      	bhi.n	e00 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     e08:	0212      	lsls	r2, r2, #8
     e0a:	4332      	orrs	r2, r6
     e0c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e0e:	2380      	movs	r3, #128	; 0x80
     e10:	035b      	lsls	r3, r3, #13
     e12:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     e14:	7a0b      	ldrb	r3, [r1, #8]
     e16:	2b00      	cmp	r3, #0
     e18:	d002      	beq.n	e20 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     e1a:	2380      	movs	r3, #128	; 0x80
     e1c:	039b      	lsls	r3, r3, #14
     e1e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e20:	4a13      	ldr	r2, [pc, #76]	; (e70 <system_gclk_gen_set_config+0xa8>)
     e22:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     e24:	b25b      	sxtb	r3, r3
     e26:	2b00      	cmp	r3, #0
     e28:	dbfb      	blt.n	e22 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e2a:	4b12      	ldr	r3, [pc, #72]	; (e74 <system_gclk_gen_set_config+0xac>)
     e2c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e2e:	4b12      	ldr	r3, [pc, #72]	; (e78 <system_gclk_gen_set_config+0xb0>)
     e30:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e32:	4a0f      	ldr	r2, [pc, #60]	; (e70 <system_gclk_gen_set_config+0xa8>)
     e34:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e36:	b25b      	sxtb	r3, r3
     e38:	2b00      	cmp	r3, #0
     e3a:	dbfb      	blt.n	e34 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e3c:	4b0c      	ldr	r3, [pc, #48]	; (e70 <system_gclk_gen_set_config+0xa8>)
     e3e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e40:	001a      	movs	r2, r3
     e42:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     e44:	b25b      	sxtb	r3, r3
     e46:	2b00      	cmp	r3, #0
     e48:	dbfb      	blt.n	e42 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e4a:	4a09      	ldr	r2, [pc, #36]	; (e70 <system_gclk_gen_set_config+0xa8>)
     e4c:	6853      	ldr	r3, [r2, #4]
     e4e:	2180      	movs	r1, #128	; 0x80
     e50:	0249      	lsls	r1, r1, #9
     e52:	400b      	ands	r3, r1
     e54:	431d      	orrs	r5, r3
     e56:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e58:	4b08      	ldr	r3, [pc, #32]	; (e7c <system_gclk_gen_set_config+0xb4>)
     e5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e5c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     e5e:	2200      	movs	r2, #0
     e60:	e7d2      	b.n	e08 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e62:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     e64:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e66:	2380      	movs	r3, #128	; 0x80
     e68:	029b      	lsls	r3, r3, #10
     e6a:	431d      	orrs	r5, r3
     e6c:	e7d2      	b.n	e14 <system_gclk_gen_set_config+0x4c>
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	40000c00 	.word	0x40000c00
     e74:	00000115 	.word	0x00000115
     e78:	40000c08 	.word	0x40000c08
     e7c:	00000155 	.word	0x00000155

00000e80 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e80:	b510      	push	{r4, lr}
     e82:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e84:	4a0b      	ldr	r2, [pc, #44]	; (eb4 <system_gclk_gen_enable+0x34>)
     e86:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e88:	b25b      	sxtb	r3, r3
     e8a:	2b00      	cmp	r3, #0
     e8c:	dbfb      	blt.n	e86 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     e8e:	4b0a      	ldr	r3, [pc, #40]	; (eb8 <system_gclk_gen_enable+0x38>)
     e90:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e92:	4b0a      	ldr	r3, [pc, #40]	; (ebc <system_gclk_gen_enable+0x3c>)
     e94:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e96:	4a07      	ldr	r2, [pc, #28]	; (eb4 <system_gclk_gen_enable+0x34>)
     e98:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e9a:	b25b      	sxtb	r3, r3
     e9c:	2b00      	cmp	r3, #0
     e9e:	dbfb      	blt.n	e98 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     ea0:	4a04      	ldr	r2, [pc, #16]	; (eb4 <system_gclk_gen_enable+0x34>)
     ea2:	6851      	ldr	r1, [r2, #4]
     ea4:	2380      	movs	r3, #128	; 0x80
     ea6:	025b      	lsls	r3, r3, #9
     ea8:	430b      	orrs	r3, r1
     eaa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     eac:	4b04      	ldr	r3, [pc, #16]	; (ec0 <system_gclk_gen_enable+0x40>)
     eae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     eb0:	bd10      	pop	{r4, pc}
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	40000c00 	.word	0x40000c00
     eb8:	00000115 	.word	0x00000115
     ebc:	40000c04 	.word	0x40000c04
     ec0:	00000155 	.word	0x00000155

00000ec4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     ec4:	b570      	push	{r4, r5, r6, lr}
     ec6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ec8:	4a1a      	ldr	r2, [pc, #104]	; (f34 <system_gclk_gen_get_hz+0x70>)
     eca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ecc:	b25b      	sxtb	r3, r3
     ece:	2b00      	cmp	r3, #0
     ed0:	dbfb      	blt.n	eca <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     ed2:	4b19      	ldr	r3, [pc, #100]	; (f38 <system_gclk_gen_get_hz+0x74>)
     ed4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ed6:	4b19      	ldr	r3, [pc, #100]	; (f3c <system_gclk_gen_get_hz+0x78>)
     ed8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     eda:	4a16      	ldr	r2, [pc, #88]	; (f34 <system_gclk_gen_get_hz+0x70>)
     edc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ede:	b25b      	sxtb	r3, r3
     ee0:	2b00      	cmp	r3, #0
     ee2:	dbfb      	blt.n	edc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     ee4:	4e13      	ldr	r6, [pc, #76]	; (f34 <system_gclk_gen_get_hz+0x70>)
     ee6:	6870      	ldr	r0, [r6, #4]
     ee8:	04c0      	lsls	r0, r0, #19
     eea:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     eec:	4b14      	ldr	r3, [pc, #80]	; (f40 <system_gclk_gen_get_hz+0x7c>)
     eee:	4798      	blx	r3
     ef0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ef2:	4b12      	ldr	r3, [pc, #72]	; (f3c <system_gclk_gen_get_hz+0x78>)
     ef4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     ef6:	6876      	ldr	r6, [r6, #4]
     ef8:	02f6      	lsls	r6, r6, #11
     efa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     efc:	4b11      	ldr	r3, [pc, #68]	; (f44 <system_gclk_gen_get_hz+0x80>)
     efe:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f00:	4a0c      	ldr	r2, [pc, #48]	; (f34 <system_gclk_gen_get_hz+0x70>)
     f02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f04:	b25b      	sxtb	r3, r3
     f06:	2b00      	cmp	r3, #0
     f08:	dbfb      	blt.n	f02 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f0a:	4b0a      	ldr	r3, [pc, #40]	; (f34 <system_gclk_gen_get_hz+0x70>)
     f0c:	689c      	ldr	r4, [r3, #8]
     f0e:	0224      	lsls	r4, r4, #8
     f10:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     f12:	4b0d      	ldr	r3, [pc, #52]	; (f48 <system_gclk_gen_get_hz+0x84>)
     f14:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     f16:	2e00      	cmp	r6, #0
     f18:	d107      	bne.n	f2a <system_gclk_gen_get_hz+0x66>
     f1a:	2c01      	cmp	r4, #1
     f1c:	d907      	bls.n	f2e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     f1e:	0021      	movs	r1, r4
     f20:	0028      	movs	r0, r5
     f22:	4b0a      	ldr	r3, [pc, #40]	; (f4c <system_gclk_gen_get_hz+0x88>)
     f24:	4798      	blx	r3
     f26:	0005      	movs	r5, r0
     f28:	e001      	b.n	f2e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     f2a:	3401      	adds	r4, #1
     f2c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     f2e:	0028      	movs	r0, r5
     f30:	bd70      	pop	{r4, r5, r6, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	40000c00 	.word	0x40000c00
     f38:	00000115 	.word	0x00000115
     f3c:	40000c04 	.word	0x40000c04
     f40:	00000b99 	.word	0x00000b99
     f44:	40000c08 	.word	0x40000c08
     f48:	00000155 	.word	0x00000155
     f4c:	0000145d 	.word	0x0000145d

00000f50 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f50:	b510      	push	{r4, lr}
     f52:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f54:	4b06      	ldr	r3, [pc, #24]	; (f70 <system_gclk_chan_enable+0x20>)
     f56:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f58:	4b06      	ldr	r3, [pc, #24]	; (f74 <system_gclk_chan_enable+0x24>)
     f5a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f5c:	4a06      	ldr	r2, [pc, #24]	; (f78 <system_gclk_chan_enable+0x28>)
     f5e:	8853      	ldrh	r3, [r2, #2]
     f60:	2180      	movs	r1, #128	; 0x80
     f62:	01c9      	lsls	r1, r1, #7
     f64:	430b      	orrs	r3, r1
     f66:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     f68:	4b04      	ldr	r3, [pc, #16]	; (f7c <system_gclk_chan_enable+0x2c>)
     f6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f6c:	bd10      	pop	{r4, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00000115 	.word	0x00000115
     f74:	40000c02 	.word	0x40000c02
     f78:	40000c00 	.word	0x40000c00
     f7c:	00000155 	.word	0x00000155

00000f80 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f80:	b510      	push	{r4, lr}
     f82:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f84:	4b0f      	ldr	r3, [pc, #60]	; (fc4 <system_gclk_chan_disable+0x44>)
     f86:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f88:	4b0f      	ldr	r3, [pc, #60]	; (fc8 <system_gclk_chan_disable+0x48>)
     f8a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f8c:	4a0f      	ldr	r2, [pc, #60]	; (fcc <system_gclk_chan_disable+0x4c>)
     f8e:	8853      	ldrh	r3, [r2, #2]
     f90:	051b      	lsls	r3, r3, #20
     f92:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f94:	8853      	ldrh	r3, [r2, #2]
     f96:	490e      	ldr	r1, [pc, #56]	; (fd0 <system_gclk_chan_disable+0x50>)
     f98:	400b      	ands	r3, r1
     f9a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f9c:	8853      	ldrh	r3, [r2, #2]
     f9e:	490d      	ldr	r1, [pc, #52]	; (fd4 <system_gclk_chan_disable+0x54>)
     fa0:	400b      	ands	r3, r1
     fa2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     fa4:	0011      	movs	r1, r2
     fa6:	2280      	movs	r2, #128	; 0x80
     fa8:	01d2      	lsls	r2, r2, #7
     faa:	884b      	ldrh	r3, [r1, #2]
     fac:	4213      	tst	r3, r2
     fae:	d1fc      	bne.n	faa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     fb0:	4906      	ldr	r1, [pc, #24]	; (fcc <system_gclk_chan_disable+0x4c>)
     fb2:	884a      	ldrh	r2, [r1, #2]
     fb4:	0203      	lsls	r3, r0, #8
     fb6:	4806      	ldr	r0, [pc, #24]	; (fd0 <system_gclk_chan_disable+0x50>)
     fb8:	4002      	ands	r2, r0
     fba:	4313      	orrs	r3, r2
     fbc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <system_gclk_chan_disable+0x58>)
     fc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fc2:	bd10      	pop	{r4, pc}
     fc4:	00000115 	.word	0x00000115
     fc8:	40000c02 	.word	0x40000c02
     fcc:	40000c00 	.word	0x40000c00
     fd0:	fffff0ff 	.word	0xfffff0ff
     fd4:	ffffbfff 	.word	0xffffbfff
     fd8:	00000155 	.word	0x00000155

00000fdc <system_gclk_chan_set_config>:
{
     fdc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     fde:	780c      	ldrb	r4, [r1, #0]
     fe0:	0224      	lsls	r4, r4, #8
     fe2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     fe4:	4b02      	ldr	r3, [pc, #8]	; (ff0 <system_gclk_chan_set_config+0x14>)
     fe6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     fe8:	b2a4      	uxth	r4, r4
     fea:	4b02      	ldr	r3, [pc, #8]	; (ff4 <system_gclk_chan_set_config+0x18>)
     fec:	805c      	strh	r4, [r3, #2]
}
     fee:	bd10      	pop	{r4, pc}
     ff0:	00000f81 	.word	0x00000f81
     ff4:	40000c00 	.word	0x40000c00

00000ff8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     ff8:	b510      	push	{r4, lr}
     ffa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ffc:	4b06      	ldr	r3, [pc, #24]	; (1018 <system_gclk_chan_get_hz+0x20>)
     ffe:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1000:	4b06      	ldr	r3, [pc, #24]	; (101c <system_gclk_chan_get_hz+0x24>)
    1002:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1004:	4b06      	ldr	r3, [pc, #24]	; (1020 <system_gclk_chan_get_hz+0x28>)
    1006:	885c      	ldrh	r4, [r3, #2]
    1008:	0524      	lsls	r4, r4, #20
    100a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    100c:	4b05      	ldr	r3, [pc, #20]	; (1024 <system_gclk_chan_get_hz+0x2c>)
    100e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1010:	0020      	movs	r0, r4
    1012:	4b05      	ldr	r3, [pc, #20]	; (1028 <system_gclk_chan_get_hz+0x30>)
    1014:	4798      	blx	r3
}
    1016:	bd10      	pop	{r4, pc}
    1018:	00000115 	.word	0x00000115
    101c:	40000c02 	.word	0x40000c02
    1020:	40000c00 	.word	0x40000c00
    1024:	00000155 	.word	0x00000155
    1028:	00000ec5 	.word	0x00000ec5

0000102c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    102c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    102e:	78d3      	ldrb	r3, [r2, #3]
    1030:	2b00      	cmp	r3, #0
    1032:	d135      	bne.n	10a0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1034:	7813      	ldrb	r3, [r2, #0]
    1036:	2b80      	cmp	r3, #128	; 0x80
    1038:	d029      	beq.n	108e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    103a:	061b      	lsls	r3, r3, #24
    103c:	2480      	movs	r4, #128	; 0x80
    103e:	0264      	lsls	r4, r4, #9
    1040:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1042:	7854      	ldrb	r4, [r2, #1]
    1044:	2502      	movs	r5, #2
    1046:	43ac      	bics	r4, r5
    1048:	d106      	bne.n	1058 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    104a:	7894      	ldrb	r4, [r2, #2]
    104c:	2c00      	cmp	r4, #0
    104e:	d120      	bne.n	1092 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1050:	2480      	movs	r4, #128	; 0x80
    1052:	02a4      	lsls	r4, r4, #10
    1054:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1056:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1058:	7854      	ldrb	r4, [r2, #1]
    105a:	3c01      	subs	r4, #1
    105c:	2c01      	cmp	r4, #1
    105e:	d91c      	bls.n	109a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1060:	040d      	lsls	r5, r1, #16
    1062:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1064:	24a0      	movs	r4, #160	; 0xa0
    1066:	05e4      	lsls	r4, r4, #23
    1068:	432c      	orrs	r4, r5
    106a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    106c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    106e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1070:	24d0      	movs	r4, #208	; 0xd0
    1072:	0624      	lsls	r4, r4, #24
    1074:	432c      	orrs	r4, r5
    1076:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1078:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    107a:	78d4      	ldrb	r4, [r2, #3]
    107c:	2c00      	cmp	r4, #0
    107e:	d122      	bne.n	10c6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1080:	035b      	lsls	r3, r3, #13
    1082:	d51c      	bpl.n	10be <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1084:	7893      	ldrb	r3, [r2, #2]
    1086:	2b01      	cmp	r3, #1
    1088:	d01e      	beq.n	10c8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    108a:	6141      	str	r1, [r0, #20]
    108c:	e017      	b.n	10be <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    108e:	2300      	movs	r3, #0
    1090:	e7d7      	b.n	1042 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1092:	24c0      	movs	r4, #192	; 0xc0
    1094:	02e4      	lsls	r4, r4, #11
    1096:	4323      	orrs	r3, r4
    1098:	e7dd      	b.n	1056 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    109a:	4c0d      	ldr	r4, [pc, #52]	; (10d0 <_system_pinmux_config+0xa4>)
    109c:	4023      	ands	r3, r4
    109e:	e7df      	b.n	1060 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    10a0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    10a2:	040c      	lsls	r4, r1, #16
    10a4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10a6:	23a0      	movs	r3, #160	; 0xa0
    10a8:	05db      	lsls	r3, r3, #23
    10aa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10ac:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    10ae:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    10b0:	23d0      	movs	r3, #208	; 0xd0
    10b2:	061b      	lsls	r3, r3, #24
    10b4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10b6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    10b8:	78d3      	ldrb	r3, [r2, #3]
    10ba:	2b00      	cmp	r3, #0
    10bc:	d103      	bne.n	10c6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10be:	7853      	ldrb	r3, [r2, #1]
    10c0:	3b01      	subs	r3, #1
    10c2:	2b01      	cmp	r3, #1
    10c4:	d902      	bls.n	10cc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    10c6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    10c8:	6181      	str	r1, [r0, #24]
    10ca:	e7f8      	b.n	10be <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    10cc:	6081      	str	r1, [r0, #8]
}
    10ce:	e7fa      	b.n	10c6 <_system_pinmux_config+0x9a>
    10d0:	fffbffff 	.word	0xfffbffff

000010d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    10d4:	b510      	push	{r4, lr}
    10d6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10d8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10da:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10dc:	2900      	cmp	r1, #0
    10de:	d104      	bne.n	10ea <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    10e0:	0943      	lsrs	r3, r0, #5
    10e2:	01db      	lsls	r3, r3, #7
    10e4:	4905      	ldr	r1, [pc, #20]	; (10fc <system_pinmux_pin_set_config+0x28>)
    10e6:	468c      	mov	ip, r1
    10e8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    10ea:	241f      	movs	r4, #31
    10ec:	4020      	ands	r0, r4
    10ee:	2101      	movs	r1, #1
    10f0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    10f2:	0018      	movs	r0, r3
    10f4:	4b02      	ldr	r3, [pc, #8]	; (1100 <system_pinmux_pin_set_config+0x2c>)
    10f6:	4798      	blx	r3
}
    10f8:	bd10      	pop	{r4, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	41004400 	.word	0x41004400
    1100:	0000102d 	.word	0x0000102d

00001104 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1104:	4770      	bx	lr
	...

00001108 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1108:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    110a:	4b05      	ldr	r3, [pc, #20]	; (1120 <system_init+0x18>)
    110c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    110e:	4b05      	ldr	r3, [pc, #20]	; (1124 <system_init+0x1c>)
    1110:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1112:	4b05      	ldr	r3, [pc, #20]	; (1128 <system_init+0x20>)
    1114:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1116:	4b05      	ldr	r3, [pc, #20]	; (112c <system_init+0x24>)
    1118:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    111a:	4b05      	ldr	r3, [pc, #20]	; (1130 <system_init+0x28>)
    111c:	4798      	blx	r3
}
    111e:	bd10      	pop	{r4, pc}
    1120:	00000d0d 	.word	0x00000d0d
    1124:	00000185 	.word	0x00000185
    1128:	00001105 	.word	0x00001105
    112c:	00001105 	.word	0x00001105
    1130:	00001105 	.word	0x00001105

00001134 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1134:	e7fe      	b.n	1134 <Dummy_Handler>
	...

00001138 <Reset_Handler>:
{
    1138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    113a:	4a2a      	ldr	r2, [pc, #168]	; (11e4 <Reset_Handler+0xac>)
    113c:	4b2a      	ldr	r3, [pc, #168]	; (11e8 <Reset_Handler+0xb0>)
    113e:	429a      	cmp	r2, r3
    1140:	d011      	beq.n	1166 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1142:	001a      	movs	r2, r3
    1144:	4b29      	ldr	r3, [pc, #164]	; (11ec <Reset_Handler+0xb4>)
    1146:	429a      	cmp	r2, r3
    1148:	d20d      	bcs.n	1166 <Reset_Handler+0x2e>
    114a:	4a29      	ldr	r2, [pc, #164]	; (11f0 <Reset_Handler+0xb8>)
    114c:	3303      	adds	r3, #3
    114e:	1a9b      	subs	r3, r3, r2
    1150:	089b      	lsrs	r3, r3, #2
    1152:	3301      	adds	r3, #1
    1154:	009b      	lsls	r3, r3, #2
    1156:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1158:	4823      	ldr	r0, [pc, #140]	; (11e8 <Reset_Handler+0xb0>)
    115a:	4922      	ldr	r1, [pc, #136]	; (11e4 <Reset_Handler+0xac>)
    115c:	588c      	ldr	r4, [r1, r2]
    115e:	5084      	str	r4, [r0, r2]
    1160:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1162:	429a      	cmp	r2, r3
    1164:	d1fa      	bne.n	115c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1166:	4a23      	ldr	r2, [pc, #140]	; (11f4 <Reset_Handler+0xbc>)
    1168:	4b23      	ldr	r3, [pc, #140]	; (11f8 <Reset_Handler+0xc0>)
    116a:	429a      	cmp	r2, r3
    116c:	d20a      	bcs.n	1184 <Reset_Handler+0x4c>
    116e:	43d3      	mvns	r3, r2
    1170:	4921      	ldr	r1, [pc, #132]	; (11f8 <Reset_Handler+0xc0>)
    1172:	185b      	adds	r3, r3, r1
    1174:	2103      	movs	r1, #3
    1176:	438b      	bics	r3, r1
    1178:	3304      	adds	r3, #4
    117a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    117c:	2100      	movs	r1, #0
    117e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1180:	4293      	cmp	r3, r2
    1182:	d1fc      	bne.n	117e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1184:	4a1d      	ldr	r2, [pc, #116]	; (11fc <Reset_Handler+0xc4>)
    1186:	21ff      	movs	r1, #255	; 0xff
    1188:	4b1d      	ldr	r3, [pc, #116]	; (1200 <Reset_Handler+0xc8>)
    118a:	438b      	bics	r3, r1
    118c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    118e:	39fd      	subs	r1, #253	; 0xfd
    1190:	2390      	movs	r3, #144	; 0x90
    1192:	005b      	lsls	r3, r3, #1
    1194:	4a1b      	ldr	r2, [pc, #108]	; (1204 <Reset_Handler+0xcc>)
    1196:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1198:	4a1b      	ldr	r2, [pc, #108]	; (1208 <Reset_Handler+0xd0>)
    119a:	78d3      	ldrb	r3, [r2, #3]
    119c:	2503      	movs	r5, #3
    119e:	43ab      	bics	r3, r5
    11a0:	2402      	movs	r4, #2
    11a2:	4323      	orrs	r3, r4
    11a4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    11a6:	78d3      	ldrb	r3, [r2, #3]
    11a8:	270c      	movs	r7, #12
    11aa:	43bb      	bics	r3, r7
    11ac:	2608      	movs	r6, #8
    11ae:	4333      	orrs	r3, r6
    11b0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    11b2:	4b16      	ldr	r3, [pc, #88]	; (120c <Reset_Handler+0xd4>)
    11b4:	7b98      	ldrb	r0, [r3, #14]
    11b6:	2230      	movs	r2, #48	; 0x30
    11b8:	4390      	bics	r0, r2
    11ba:	2220      	movs	r2, #32
    11bc:	4310      	orrs	r0, r2
    11be:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    11c0:	7b99      	ldrb	r1, [r3, #14]
    11c2:	43b9      	bics	r1, r7
    11c4:	4331      	orrs	r1, r6
    11c6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    11c8:	7b9a      	ldrb	r2, [r3, #14]
    11ca:	43aa      	bics	r2, r5
    11cc:	4322      	orrs	r2, r4
    11ce:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    11d0:	4a0f      	ldr	r2, [pc, #60]	; (1210 <Reset_Handler+0xd8>)
    11d2:	6853      	ldr	r3, [r2, #4]
    11d4:	2180      	movs	r1, #128	; 0x80
    11d6:	430b      	orrs	r3, r1
    11d8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    11da:	4b0e      	ldr	r3, [pc, #56]	; (1214 <Reset_Handler+0xdc>)
    11dc:	4798      	blx	r3
        main();
    11de:	4b0e      	ldr	r3, [pc, #56]	; (1218 <Reset_Handler+0xe0>)
    11e0:	4798      	blx	r3
    11e2:	e7fe      	b.n	11e2 <Reset_Handler+0xaa>
    11e4:	000021e4 	.word	0x000021e4
    11e8:	20000000 	.word	0x20000000
    11ec:	20000068 	.word	0x20000068
    11f0:	20000004 	.word	0x20000004
    11f4:	20000068 	.word	0x20000068
    11f8:	20000168 	.word	0x20000168
    11fc:	e000ed00 	.word	0xe000ed00
    1200:	00000000 	.word	0x00000000
    1204:	41007000 	.word	0x41007000
    1208:	41005000 	.word	0x41005000
    120c:	41004800 	.word	0x41004800
    1210:	41004000 	.word	0x41004000
    1214:	000015c9 	.word	0x000015c9
    1218:	00001331 	.word	0x00001331

0000121c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    121c:	b5f0      	push	{r4, r5, r6, r7, lr}
    121e:	46c6      	mov	lr, r8
    1220:	b500      	push	{lr}
    1222:	000c      	movs	r4, r1
    1224:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1226:	2800      	cmp	r0, #0
    1228:	d10f      	bne.n	124a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    122a:	2a00      	cmp	r2, #0
    122c:	dd11      	ble.n	1252 <_read+0x36>
    122e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1230:	4e09      	ldr	r6, [pc, #36]	; (1258 <_read+0x3c>)
    1232:	4d0a      	ldr	r5, [pc, #40]	; (125c <_read+0x40>)
    1234:	6830      	ldr	r0, [r6, #0]
    1236:	0021      	movs	r1, r4
    1238:	682b      	ldr	r3, [r5, #0]
    123a:	4798      	blx	r3
		ptr++;
    123c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    123e:	42bc      	cmp	r4, r7
    1240:	d1f8      	bne.n	1234 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1242:	4640      	mov	r0, r8
    1244:	bc04      	pop	{r2}
    1246:	4690      	mov	r8, r2
    1248:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    124a:	2301      	movs	r3, #1
    124c:	425b      	negs	r3, r3
    124e:	4698      	mov	r8, r3
    1250:	e7f7      	b.n	1242 <_read+0x26>
	for (; len > 0; --len) {
    1252:	4680      	mov	r8, r0
    1254:	e7f5      	b.n	1242 <_read+0x26>
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	200000ec 	.word	0x200000ec
    125c:	200000e4 	.word	0x200000e4

00001260 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1260:	b5f0      	push	{r4, r5, r6, r7, lr}
    1262:	46c6      	mov	lr, r8
    1264:	b500      	push	{lr}
    1266:	000e      	movs	r6, r1
    1268:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    126a:	3801      	subs	r0, #1
    126c:	2802      	cmp	r0, #2
    126e:	d810      	bhi.n	1292 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1270:	2a00      	cmp	r2, #0
    1272:	d011      	beq.n	1298 <_write+0x38>
    1274:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1276:	4b0c      	ldr	r3, [pc, #48]	; (12a8 <_write+0x48>)
    1278:	4698      	mov	r8, r3
    127a:	4f0c      	ldr	r7, [pc, #48]	; (12ac <_write+0x4c>)
    127c:	4643      	mov	r3, r8
    127e:	6818      	ldr	r0, [r3, #0]
    1280:	5d31      	ldrb	r1, [r6, r4]
    1282:	683b      	ldr	r3, [r7, #0]
    1284:	4798      	blx	r3
    1286:	2800      	cmp	r0, #0
    1288:	db08      	blt.n	129c <_write+0x3c>
			return -1;
		}
		++nChars;
    128a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    128c:	42a5      	cmp	r5, r4
    128e:	d1f5      	bne.n	127c <_write+0x1c>
    1290:	e006      	b.n	12a0 <_write+0x40>
		return -1;
    1292:	2401      	movs	r4, #1
    1294:	4264      	negs	r4, r4
    1296:	e003      	b.n	12a0 <_write+0x40>
	for (; len != 0; --len) {
    1298:	0014      	movs	r4, r2
    129a:	e001      	b.n	12a0 <_write+0x40>
			return -1;
    129c:	2401      	movs	r4, #1
    129e:	4264      	negs	r4, r4
	}
	return nChars;
}
    12a0:	0020      	movs	r0, r4
    12a2:	bc04      	pop	{r2}
    12a4:	4690      	mov	r8, r2
    12a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12a8:	200000ec 	.word	0x200000ec
    12ac:	200000e8 	.word	0x200000e8

000012b0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    12b0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    12b2:	4a06      	ldr	r2, [pc, #24]	; (12cc <_sbrk+0x1c>)
    12b4:	6812      	ldr	r2, [r2, #0]
    12b6:	2a00      	cmp	r2, #0
    12b8:	d004      	beq.n	12c4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    12ba:	4a04      	ldr	r2, [pc, #16]	; (12cc <_sbrk+0x1c>)
    12bc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    12be:	18c3      	adds	r3, r0, r3
    12c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    12c2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    12c4:	4902      	ldr	r1, [pc, #8]	; (12d0 <_sbrk+0x20>)
    12c6:	4a01      	ldr	r2, [pc, #4]	; (12cc <_sbrk+0x1c>)
    12c8:	6011      	str	r1, [r2, #0]
    12ca:	e7f6      	b.n	12ba <_sbrk+0xa>
    12cc:	200000c0 	.word	0x200000c0
    12d0:	20002168 	.word	0x20002168

000012d4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    12d4:	2001      	movs	r0, #1
    12d6:	4240      	negs	r0, r0
    12d8:	4770      	bx	lr

000012da <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    12da:	2380      	movs	r3, #128	; 0x80
    12dc:	019b      	lsls	r3, r3, #6
    12de:	604b      	str	r3, [r1, #4]

	return 0;
}
    12e0:	2000      	movs	r0, #0
    12e2:	4770      	bx	lr

000012e4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    12e4:	2001      	movs	r0, #1
    12e6:	4770      	bx	lr

000012e8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    12e8:	2000      	movs	r0, #0
    12ea:	4770      	bx	lr

000012ec <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	b082      	sub	sp, #8
    12f0:	0005      	movs	r5, r0
    12f2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    12f4:	2200      	movs	r2, #0
    12f6:	466b      	mov	r3, sp
    12f8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    12fa:	4c06      	ldr	r4, [pc, #24]	; (1314 <usart_serial_getchar+0x28>)
    12fc:	466b      	mov	r3, sp
    12fe:	1d99      	adds	r1, r3, #6
    1300:	0028      	movs	r0, r5
    1302:	47a0      	blx	r4
    1304:	2800      	cmp	r0, #0
    1306:	d1f9      	bne.n	12fc <usart_serial_getchar+0x10>

	*c = temp;
    1308:	466b      	mov	r3, sp
    130a:	3306      	adds	r3, #6
    130c:	881b      	ldrh	r3, [r3, #0]
    130e:	7033      	strb	r3, [r6, #0]
}
    1310:	b002      	add	sp, #8
    1312:	bd70      	pop	{r4, r5, r6, pc}
    1314:	00000995 	.word	0x00000995

00001318 <usart_serial_putchar>:
{
    1318:	b570      	push	{r4, r5, r6, lr}
    131a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    131c:	b28c      	uxth	r4, r1
    131e:	4e03      	ldr	r6, [pc, #12]	; (132c <usart_serial_putchar+0x14>)
    1320:	0021      	movs	r1, r4
    1322:	0028      	movs	r0, r5
    1324:	47b0      	blx	r6
    1326:	2800      	cmp	r0, #0
    1328:	d1fa      	bne.n	1320 <usart_serial_putchar+0x8>
}
    132a:	bd70      	pop	{r4, r5, r6, pc}
    132c:	00000969 	.word	0x00000969

00001330 <main>:

struct usart_module usart_instance;
struct usart_config usart_conf;

int main (void)
{
    1330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
    1332:	4b36      	ldr	r3, [pc, #216]	; (140c <main+0xdc>)
    1334:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1336:	4a36      	ldr	r2, [pc, #216]	; (1410 <main+0xe0>)
    1338:	2380      	movs	r3, #128	; 0x80
    133a:	05db      	lsls	r3, r3, #23
    133c:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    133e:	2300      	movs	r3, #0
    1340:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    1342:	21ff      	movs	r1, #255	; 0xff
    1344:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    1346:	2100      	movs	r1, #0
    1348:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    134a:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    134c:	2096      	movs	r0, #150	; 0x96
    134e:	0180      	lsls	r0, r0, #6
    1350:	6210      	str	r0, [r2, #32]
	config->receiver_enable  = true;
    1352:	2401      	movs	r4, #1
    1354:	2024      	movs	r0, #36	; 0x24
    1356:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    1358:	3001      	adds	r0, #1
    135a:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    135c:	3001      	adds	r0, #1
    135e:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    1360:	3001      	adds	r0, #1
    1362:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    1364:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1366:	3005      	adds	r0, #5
    1368:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    136a:	3001      	adds	r0, #1
    136c:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    136e:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1370:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1372:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1374:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1376:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1378:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    137a:	2313      	movs	r3, #19
    137c:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    137e:	7751      	strb	r1, [r2, #29]

	usart_get_config_defaults(&usart_conf);
	usart_conf.baudrate    = 9600;
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1380:	2380      	movs	r3, #128	; 0x80
    1382:	035b      	lsls	r3, r3, #13
    1384:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1386:	4b23      	ldr	r3, [pc, #140]	; (1414 <main+0xe4>)
    1388:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    138a:	4b23      	ldr	r3, [pc, #140]	; (1418 <main+0xe8>)
    138c:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    138e:	2301      	movs	r3, #1
    1390:	425b      	negs	r3, r3
    1392:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1394:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1396:	4d21      	ldr	r5, [pc, #132]	; (141c <main+0xec>)
    1398:	4b21      	ldr	r3, [pc, #132]	; (1420 <main+0xf0>)
    139a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    139c:	4921      	ldr	r1, [pc, #132]	; (1424 <main+0xf4>)
    139e:	4b22      	ldr	r3, [pc, #136]	; (1428 <main+0xf8>)
    13a0:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    13a2:	4922      	ldr	r1, [pc, #136]	; (142c <main+0xfc>)
    13a4:	4b22      	ldr	r3, [pc, #136]	; (1430 <main+0x100>)
    13a6:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    13a8:	4922      	ldr	r1, [pc, #136]	; (1434 <main+0x104>)
    13aa:	0028      	movs	r0, r5
    13ac:	4b22      	ldr	r3, [pc, #136]	; (1438 <main+0x108>)
    13ae:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    13b0:	4f22      	ldr	r7, [pc, #136]	; (143c <main+0x10c>)
    13b2:	683b      	ldr	r3, [r7, #0]
    13b4:	6898      	ldr	r0, [r3, #8]
    13b6:	2100      	movs	r1, #0
    13b8:	4e21      	ldr	r6, [pc, #132]	; (1440 <main+0x110>)
    13ba:	47b0      	blx	r6
	setbuf(stdin, NULL);
    13bc:	683b      	ldr	r3, [r7, #0]
    13be:	6858      	ldr	r0, [r3, #4]
    13c0:	2100      	movs	r1, #0
    13c2:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13c4:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    13c6:	0030      	movs	r0, r6
    13c8:	4b1e      	ldr	r3, [pc, #120]	; (1444 <main+0x114>)
    13ca:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    13cc:	231f      	movs	r3, #31
    13ce:	4018      	ands	r0, r3
    13d0:	4084      	lsls	r4, r0
    13d2:	4b1d      	ldr	r3, [pc, #116]	; (1448 <main+0x118>)
    13d4:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    13d6:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    13d8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    13da:	2a00      	cmp	r2, #0
    13dc:	d1fc      	bne.n	13d8 <main+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    13de:	6833      	ldr	r3, [r6, #0]
    13e0:	3202      	adds	r2, #2
    13e2:	4313      	orrs	r3, r2
    13e4:	6033      	str	r3, [r6, #0]
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
	
	usart_enable(&usart_instance);
	
	/* Insert application code here, after the board has been initialized. */
	printf("Oi Turma !!\r\n");
    13e6:	4819      	ldr	r0, [pc, #100]	; (144c <main+0x11c>)
    13e8:	4b19      	ldr	r3, [pc, #100]	; (1450 <main+0x120>)
    13ea:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    13ec:	4c19      	ldr	r4, [pc, #100]	; (1454 <main+0x124>)
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
			printf("LED ON\r\n");
    13ee:	4d1a      	ldr	r5, [pc, #104]	; (1458 <main+0x128>)
    13f0:	4e17      	ldr	r6, [pc, #92]	; (1450 <main+0x120>)
    13f2:	e004      	b.n	13fe <main+0xce>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    13f4:	2380      	movs	r3, #128	; 0x80
    13f6:	031b      	lsls	r3, r3, #12
    13f8:	6163      	str	r3, [r4, #20]
    13fa:	0028      	movs	r0, r5
    13fc:	47b0      	blx	r6
	return (port_base->IN.reg & pin_mask);
    13fe:	6a23      	ldr	r3, [r4, #32]
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    1400:	00db      	lsls	r3, r3, #3
    1402:	d5f7      	bpl.n	13f4 <main+0xc4>
		port_base->OUTSET.reg = pin_mask;
    1404:	2380      	movs	r3, #128	; 0x80
    1406:	031b      	lsls	r3, r3, #12
    1408:	61a3      	str	r3, [r4, #24]
    140a:	e7f8      	b.n	13fe <main+0xce>
    140c:	00001109 	.word	0x00001109
    1410:	20000124 	.word	0x20000124
    1414:	00040003 	.word	0x00040003
    1418:	00050003 	.word	0x00050003
    141c:	200000f0 	.word	0x200000f0
    1420:	200000ec 	.word	0x200000ec
    1424:	00001319 	.word	0x00001319
    1428:	200000e8 	.word	0x200000e8
    142c:	000012ed 	.word	0x000012ed
    1430:	200000e4 	.word	0x200000e4
    1434:	42000800 	.word	0x42000800
    1438:	00000625 	.word	0x00000625
    143c:	20000004 	.word	0x20000004
    1440:	000016f5 	.word	0x000016f5
    1444:	00000595 	.word	0x00000595
    1448:	e000e100 	.word	0xe000e100
    144c:	00002148 	.word	0x00002148
    1450:	000016e1 	.word	0x000016e1
    1454:	41004400 	.word	0x41004400
    1458:	00002158 	.word	0x00002158

0000145c <__udivsi3>:
    145c:	2200      	movs	r2, #0
    145e:	0843      	lsrs	r3, r0, #1
    1460:	428b      	cmp	r3, r1
    1462:	d374      	bcc.n	154e <__udivsi3+0xf2>
    1464:	0903      	lsrs	r3, r0, #4
    1466:	428b      	cmp	r3, r1
    1468:	d35f      	bcc.n	152a <__udivsi3+0xce>
    146a:	0a03      	lsrs	r3, r0, #8
    146c:	428b      	cmp	r3, r1
    146e:	d344      	bcc.n	14fa <__udivsi3+0x9e>
    1470:	0b03      	lsrs	r3, r0, #12
    1472:	428b      	cmp	r3, r1
    1474:	d328      	bcc.n	14c8 <__udivsi3+0x6c>
    1476:	0c03      	lsrs	r3, r0, #16
    1478:	428b      	cmp	r3, r1
    147a:	d30d      	bcc.n	1498 <__udivsi3+0x3c>
    147c:	22ff      	movs	r2, #255	; 0xff
    147e:	0209      	lsls	r1, r1, #8
    1480:	ba12      	rev	r2, r2
    1482:	0c03      	lsrs	r3, r0, #16
    1484:	428b      	cmp	r3, r1
    1486:	d302      	bcc.n	148e <__udivsi3+0x32>
    1488:	1212      	asrs	r2, r2, #8
    148a:	0209      	lsls	r1, r1, #8
    148c:	d065      	beq.n	155a <__udivsi3+0xfe>
    148e:	0b03      	lsrs	r3, r0, #12
    1490:	428b      	cmp	r3, r1
    1492:	d319      	bcc.n	14c8 <__udivsi3+0x6c>
    1494:	e000      	b.n	1498 <__udivsi3+0x3c>
    1496:	0a09      	lsrs	r1, r1, #8
    1498:	0bc3      	lsrs	r3, r0, #15
    149a:	428b      	cmp	r3, r1
    149c:	d301      	bcc.n	14a2 <__udivsi3+0x46>
    149e:	03cb      	lsls	r3, r1, #15
    14a0:	1ac0      	subs	r0, r0, r3
    14a2:	4152      	adcs	r2, r2
    14a4:	0b83      	lsrs	r3, r0, #14
    14a6:	428b      	cmp	r3, r1
    14a8:	d301      	bcc.n	14ae <__udivsi3+0x52>
    14aa:	038b      	lsls	r3, r1, #14
    14ac:	1ac0      	subs	r0, r0, r3
    14ae:	4152      	adcs	r2, r2
    14b0:	0b43      	lsrs	r3, r0, #13
    14b2:	428b      	cmp	r3, r1
    14b4:	d301      	bcc.n	14ba <__udivsi3+0x5e>
    14b6:	034b      	lsls	r3, r1, #13
    14b8:	1ac0      	subs	r0, r0, r3
    14ba:	4152      	adcs	r2, r2
    14bc:	0b03      	lsrs	r3, r0, #12
    14be:	428b      	cmp	r3, r1
    14c0:	d301      	bcc.n	14c6 <__udivsi3+0x6a>
    14c2:	030b      	lsls	r3, r1, #12
    14c4:	1ac0      	subs	r0, r0, r3
    14c6:	4152      	adcs	r2, r2
    14c8:	0ac3      	lsrs	r3, r0, #11
    14ca:	428b      	cmp	r3, r1
    14cc:	d301      	bcc.n	14d2 <__udivsi3+0x76>
    14ce:	02cb      	lsls	r3, r1, #11
    14d0:	1ac0      	subs	r0, r0, r3
    14d2:	4152      	adcs	r2, r2
    14d4:	0a83      	lsrs	r3, r0, #10
    14d6:	428b      	cmp	r3, r1
    14d8:	d301      	bcc.n	14de <__udivsi3+0x82>
    14da:	028b      	lsls	r3, r1, #10
    14dc:	1ac0      	subs	r0, r0, r3
    14de:	4152      	adcs	r2, r2
    14e0:	0a43      	lsrs	r3, r0, #9
    14e2:	428b      	cmp	r3, r1
    14e4:	d301      	bcc.n	14ea <__udivsi3+0x8e>
    14e6:	024b      	lsls	r3, r1, #9
    14e8:	1ac0      	subs	r0, r0, r3
    14ea:	4152      	adcs	r2, r2
    14ec:	0a03      	lsrs	r3, r0, #8
    14ee:	428b      	cmp	r3, r1
    14f0:	d301      	bcc.n	14f6 <__udivsi3+0x9a>
    14f2:	020b      	lsls	r3, r1, #8
    14f4:	1ac0      	subs	r0, r0, r3
    14f6:	4152      	adcs	r2, r2
    14f8:	d2cd      	bcs.n	1496 <__udivsi3+0x3a>
    14fa:	09c3      	lsrs	r3, r0, #7
    14fc:	428b      	cmp	r3, r1
    14fe:	d301      	bcc.n	1504 <__udivsi3+0xa8>
    1500:	01cb      	lsls	r3, r1, #7
    1502:	1ac0      	subs	r0, r0, r3
    1504:	4152      	adcs	r2, r2
    1506:	0983      	lsrs	r3, r0, #6
    1508:	428b      	cmp	r3, r1
    150a:	d301      	bcc.n	1510 <__udivsi3+0xb4>
    150c:	018b      	lsls	r3, r1, #6
    150e:	1ac0      	subs	r0, r0, r3
    1510:	4152      	adcs	r2, r2
    1512:	0943      	lsrs	r3, r0, #5
    1514:	428b      	cmp	r3, r1
    1516:	d301      	bcc.n	151c <__udivsi3+0xc0>
    1518:	014b      	lsls	r3, r1, #5
    151a:	1ac0      	subs	r0, r0, r3
    151c:	4152      	adcs	r2, r2
    151e:	0903      	lsrs	r3, r0, #4
    1520:	428b      	cmp	r3, r1
    1522:	d301      	bcc.n	1528 <__udivsi3+0xcc>
    1524:	010b      	lsls	r3, r1, #4
    1526:	1ac0      	subs	r0, r0, r3
    1528:	4152      	adcs	r2, r2
    152a:	08c3      	lsrs	r3, r0, #3
    152c:	428b      	cmp	r3, r1
    152e:	d301      	bcc.n	1534 <__udivsi3+0xd8>
    1530:	00cb      	lsls	r3, r1, #3
    1532:	1ac0      	subs	r0, r0, r3
    1534:	4152      	adcs	r2, r2
    1536:	0883      	lsrs	r3, r0, #2
    1538:	428b      	cmp	r3, r1
    153a:	d301      	bcc.n	1540 <__udivsi3+0xe4>
    153c:	008b      	lsls	r3, r1, #2
    153e:	1ac0      	subs	r0, r0, r3
    1540:	4152      	adcs	r2, r2
    1542:	0843      	lsrs	r3, r0, #1
    1544:	428b      	cmp	r3, r1
    1546:	d301      	bcc.n	154c <__udivsi3+0xf0>
    1548:	004b      	lsls	r3, r1, #1
    154a:	1ac0      	subs	r0, r0, r3
    154c:	4152      	adcs	r2, r2
    154e:	1a41      	subs	r1, r0, r1
    1550:	d200      	bcs.n	1554 <__udivsi3+0xf8>
    1552:	4601      	mov	r1, r0
    1554:	4152      	adcs	r2, r2
    1556:	4610      	mov	r0, r2
    1558:	4770      	bx	lr
    155a:	e7ff      	b.n	155c <__udivsi3+0x100>
    155c:	b501      	push	{r0, lr}
    155e:	2000      	movs	r0, #0
    1560:	f000 f806 	bl	1570 <__aeabi_idiv0>
    1564:	bd02      	pop	{r1, pc}
    1566:	46c0      	nop			; (mov r8, r8)

00001568 <__aeabi_uidivmod>:
    1568:	2900      	cmp	r1, #0
    156a:	d0f7      	beq.n	155c <__udivsi3+0x100>
    156c:	e776      	b.n	145c <__udivsi3>
    156e:	4770      	bx	lr

00001570 <__aeabi_idiv0>:
    1570:	4770      	bx	lr
    1572:	46c0      	nop			; (mov r8, r8)

00001574 <__aeabi_lmul>:
    1574:	b5f0      	push	{r4, r5, r6, r7, lr}
    1576:	46ce      	mov	lr, r9
    1578:	4647      	mov	r7, r8
    157a:	0415      	lsls	r5, r2, #16
    157c:	0c2d      	lsrs	r5, r5, #16
    157e:	002e      	movs	r6, r5
    1580:	b580      	push	{r7, lr}
    1582:	0407      	lsls	r7, r0, #16
    1584:	0c14      	lsrs	r4, r2, #16
    1586:	0c3f      	lsrs	r7, r7, #16
    1588:	4699      	mov	r9, r3
    158a:	0c03      	lsrs	r3, r0, #16
    158c:	437e      	muls	r6, r7
    158e:	435d      	muls	r5, r3
    1590:	4367      	muls	r7, r4
    1592:	4363      	muls	r3, r4
    1594:	197f      	adds	r7, r7, r5
    1596:	0c34      	lsrs	r4, r6, #16
    1598:	19e4      	adds	r4, r4, r7
    159a:	469c      	mov	ip, r3
    159c:	42a5      	cmp	r5, r4
    159e:	d903      	bls.n	15a8 <__aeabi_lmul+0x34>
    15a0:	2380      	movs	r3, #128	; 0x80
    15a2:	025b      	lsls	r3, r3, #9
    15a4:	4698      	mov	r8, r3
    15a6:	44c4      	add	ip, r8
    15a8:	464b      	mov	r3, r9
    15aa:	4351      	muls	r1, r2
    15ac:	4343      	muls	r3, r0
    15ae:	0436      	lsls	r6, r6, #16
    15b0:	0c36      	lsrs	r6, r6, #16
    15b2:	0c25      	lsrs	r5, r4, #16
    15b4:	0424      	lsls	r4, r4, #16
    15b6:	4465      	add	r5, ip
    15b8:	19a4      	adds	r4, r4, r6
    15ba:	1859      	adds	r1, r3, r1
    15bc:	1949      	adds	r1, r1, r5
    15be:	0020      	movs	r0, r4
    15c0:	bc0c      	pop	{r2, r3}
    15c2:	4690      	mov	r8, r2
    15c4:	4699      	mov	r9, r3
    15c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000015c8 <__libc_init_array>:
    15c8:	b570      	push	{r4, r5, r6, lr}
    15ca:	2600      	movs	r6, #0
    15cc:	4d0c      	ldr	r5, [pc, #48]	; (1600 <__libc_init_array+0x38>)
    15ce:	4c0d      	ldr	r4, [pc, #52]	; (1604 <__libc_init_array+0x3c>)
    15d0:	1b64      	subs	r4, r4, r5
    15d2:	10a4      	asrs	r4, r4, #2
    15d4:	42a6      	cmp	r6, r4
    15d6:	d109      	bne.n	15ec <__libc_init_array+0x24>
    15d8:	2600      	movs	r6, #0
    15da:	f000 fdf3 	bl	21c4 <_init>
    15de:	4d0a      	ldr	r5, [pc, #40]	; (1608 <__libc_init_array+0x40>)
    15e0:	4c0a      	ldr	r4, [pc, #40]	; (160c <__libc_init_array+0x44>)
    15e2:	1b64      	subs	r4, r4, r5
    15e4:	10a4      	asrs	r4, r4, #2
    15e6:	42a6      	cmp	r6, r4
    15e8:	d105      	bne.n	15f6 <__libc_init_array+0x2e>
    15ea:	bd70      	pop	{r4, r5, r6, pc}
    15ec:	00b3      	lsls	r3, r6, #2
    15ee:	58eb      	ldr	r3, [r5, r3]
    15f0:	4798      	blx	r3
    15f2:	3601      	adds	r6, #1
    15f4:	e7ee      	b.n	15d4 <__libc_init_array+0xc>
    15f6:	00b3      	lsls	r3, r6, #2
    15f8:	58eb      	ldr	r3, [r5, r3]
    15fa:	4798      	blx	r3
    15fc:	3601      	adds	r6, #1
    15fe:	e7f2      	b.n	15e6 <__libc_init_array+0x1e>
    1600:	000021d0 	.word	0x000021d0
    1604:	000021d0 	.word	0x000021d0
    1608:	000021d0 	.word	0x000021d0
    160c:	000021d4 	.word	0x000021d4

00001610 <memset>:
    1610:	0003      	movs	r3, r0
    1612:	1882      	adds	r2, r0, r2
    1614:	4293      	cmp	r3, r2
    1616:	d100      	bne.n	161a <memset+0xa>
    1618:	4770      	bx	lr
    161a:	7019      	strb	r1, [r3, #0]
    161c:	3301      	adds	r3, #1
    161e:	e7f9      	b.n	1614 <memset+0x4>

00001620 <_puts_r>:
    1620:	b570      	push	{r4, r5, r6, lr}
    1622:	0005      	movs	r5, r0
    1624:	000e      	movs	r6, r1
    1626:	2800      	cmp	r0, #0
    1628:	d004      	beq.n	1634 <_puts_r+0x14>
    162a:	6983      	ldr	r3, [r0, #24]
    162c:	2b00      	cmp	r3, #0
    162e:	d101      	bne.n	1634 <_puts_r+0x14>
    1630:	f000 fada 	bl	1be8 <__sinit>
    1634:	69ab      	ldr	r3, [r5, #24]
    1636:	68ac      	ldr	r4, [r5, #8]
    1638:	2b00      	cmp	r3, #0
    163a:	d102      	bne.n	1642 <_puts_r+0x22>
    163c:	0028      	movs	r0, r5
    163e:	f000 fad3 	bl	1be8 <__sinit>
    1642:	4b24      	ldr	r3, [pc, #144]	; (16d4 <_puts_r+0xb4>)
    1644:	429c      	cmp	r4, r3
    1646:	d10f      	bne.n	1668 <_puts_r+0x48>
    1648:	686c      	ldr	r4, [r5, #4]
    164a:	89a3      	ldrh	r3, [r4, #12]
    164c:	071b      	lsls	r3, r3, #28
    164e:	d502      	bpl.n	1656 <_puts_r+0x36>
    1650:	6923      	ldr	r3, [r4, #16]
    1652:	2b00      	cmp	r3, #0
    1654:	d120      	bne.n	1698 <_puts_r+0x78>
    1656:	0021      	movs	r1, r4
    1658:	0028      	movs	r0, r5
    165a:	f000 f957 	bl	190c <__swsetup_r>
    165e:	2800      	cmp	r0, #0
    1660:	d01a      	beq.n	1698 <_puts_r+0x78>
    1662:	2001      	movs	r0, #1
    1664:	4240      	negs	r0, r0
    1666:	bd70      	pop	{r4, r5, r6, pc}
    1668:	4b1b      	ldr	r3, [pc, #108]	; (16d8 <_puts_r+0xb8>)
    166a:	429c      	cmp	r4, r3
    166c:	d101      	bne.n	1672 <_puts_r+0x52>
    166e:	68ac      	ldr	r4, [r5, #8]
    1670:	e7eb      	b.n	164a <_puts_r+0x2a>
    1672:	4b1a      	ldr	r3, [pc, #104]	; (16dc <_puts_r+0xbc>)
    1674:	429c      	cmp	r4, r3
    1676:	d1e8      	bne.n	164a <_puts_r+0x2a>
    1678:	68ec      	ldr	r4, [r5, #12]
    167a:	e7e6      	b.n	164a <_puts_r+0x2a>
    167c:	3b01      	subs	r3, #1
    167e:	3601      	adds	r6, #1
    1680:	60a3      	str	r3, [r4, #8]
    1682:	2b00      	cmp	r3, #0
    1684:	da04      	bge.n	1690 <_puts_r+0x70>
    1686:	69a2      	ldr	r2, [r4, #24]
    1688:	4293      	cmp	r3, r2
    168a:	db16      	blt.n	16ba <_puts_r+0x9a>
    168c:	290a      	cmp	r1, #10
    168e:	d014      	beq.n	16ba <_puts_r+0x9a>
    1690:	6823      	ldr	r3, [r4, #0]
    1692:	1c5a      	adds	r2, r3, #1
    1694:	6022      	str	r2, [r4, #0]
    1696:	7019      	strb	r1, [r3, #0]
    1698:	7831      	ldrb	r1, [r6, #0]
    169a:	68a3      	ldr	r3, [r4, #8]
    169c:	2900      	cmp	r1, #0
    169e:	d1ed      	bne.n	167c <_puts_r+0x5c>
    16a0:	3b01      	subs	r3, #1
    16a2:	60a3      	str	r3, [r4, #8]
    16a4:	2b00      	cmp	r3, #0
    16a6:	da0f      	bge.n	16c8 <_puts_r+0xa8>
    16a8:	0022      	movs	r2, r4
    16aa:	310a      	adds	r1, #10
    16ac:	0028      	movs	r0, r5
    16ae:	f000 f8d7 	bl	1860 <__swbuf_r>
    16b2:	1c43      	adds	r3, r0, #1
    16b4:	d0d5      	beq.n	1662 <_puts_r+0x42>
    16b6:	200a      	movs	r0, #10
    16b8:	e7d5      	b.n	1666 <_puts_r+0x46>
    16ba:	0022      	movs	r2, r4
    16bc:	0028      	movs	r0, r5
    16be:	f000 f8cf 	bl	1860 <__swbuf_r>
    16c2:	1c43      	adds	r3, r0, #1
    16c4:	d1e8      	bne.n	1698 <_puts_r+0x78>
    16c6:	e7cc      	b.n	1662 <_puts_r+0x42>
    16c8:	200a      	movs	r0, #10
    16ca:	6823      	ldr	r3, [r4, #0]
    16cc:	1c5a      	adds	r2, r3, #1
    16ce:	6022      	str	r2, [r4, #0]
    16d0:	7018      	strb	r0, [r3, #0]
    16d2:	e7c8      	b.n	1666 <_puts_r+0x46>
    16d4:	00002184 	.word	0x00002184
    16d8:	000021a4 	.word	0x000021a4
    16dc:	00002164 	.word	0x00002164

000016e0 <puts>:
    16e0:	b510      	push	{r4, lr}
    16e2:	4b03      	ldr	r3, [pc, #12]	; (16f0 <puts+0x10>)
    16e4:	0001      	movs	r1, r0
    16e6:	6818      	ldr	r0, [r3, #0]
    16e8:	f7ff ff9a 	bl	1620 <_puts_r>
    16ec:	bd10      	pop	{r4, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	20000004 	.word	0x20000004

000016f4 <setbuf>:
    16f4:	424a      	negs	r2, r1
    16f6:	414a      	adcs	r2, r1
    16f8:	2380      	movs	r3, #128	; 0x80
    16fa:	b510      	push	{r4, lr}
    16fc:	0052      	lsls	r2, r2, #1
    16fe:	00db      	lsls	r3, r3, #3
    1700:	f000 f802 	bl	1708 <setvbuf>
    1704:	bd10      	pop	{r4, pc}
	...

00001708 <setvbuf>:
    1708:	b5f0      	push	{r4, r5, r6, r7, lr}
    170a:	001d      	movs	r5, r3
    170c:	4b4f      	ldr	r3, [pc, #316]	; (184c <setvbuf+0x144>)
    170e:	b085      	sub	sp, #20
    1710:	681e      	ldr	r6, [r3, #0]
    1712:	0004      	movs	r4, r0
    1714:	000f      	movs	r7, r1
    1716:	9200      	str	r2, [sp, #0]
    1718:	2e00      	cmp	r6, #0
    171a:	d005      	beq.n	1728 <setvbuf+0x20>
    171c:	69b3      	ldr	r3, [r6, #24]
    171e:	2b00      	cmp	r3, #0
    1720:	d102      	bne.n	1728 <setvbuf+0x20>
    1722:	0030      	movs	r0, r6
    1724:	f000 fa60 	bl	1be8 <__sinit>
    1728:	4b49      	ldr	r3, [pc, #292]	; (1850 <setvbuf+0x148>)
    172a:	429c      	cmp	r4, r3
    172c:	d150      	bne.n	17d0 <setvbuf+0xc8>
    172e:	6874      	ldr	r4, [r6, #4]
    1730:	9b00      	ldr	r3, [sp, #0]
    1732:	2b02      	cmp	r3, #2
    1734:	d005      	beq.n	1742 <setvbuf+0x3a>
    1736:	2b01      	cmp	r3, #1
    1738:	d900      	bls.n	173c <setvbuf+0x34>
    173a:	e084      	b.n	1846 <setvbuf+0x13e>
    173c:	2d00      	cmp	r5, #0
    173e:	da00      	bge.n	1742 <setvbuf+0x3a>
    1740:	e081      	b.n	1846 <setvbuf+0x13e>
    1742:	0021      	movs	r1, r4
    1744:	0030      	movs	r0, r6
    1746:	f000 f9e1 	bl	1b0c <_fflush_r>
    174a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    174c:	2900      	cmp	r1, #0
    174e:	d008      	beq.n	1762 <setvbuf+0x5a>
    1750:	0023      	movs	r3, r4
    1752:	3344      	adds	r3, #68	; 0x44
    1754:	4299      	cmp	r1, r3
    1756:	d002      	beq.n	175e <setvbuf+0x56>
    1758:	0030      	movs	r0, r6
    175a:	f000 fb4b 	bl	1df4 <_free_r>
    175e:	2300      	movs	r3, #0
    1760:	6363      	str	r3, [r4, #52]	; 0x34
    1762:	2300      	movs	r3, #0
    1764:	61a3      	str	r3, [r4, #24]
    1766:	6063      	str	r3, [r4, #4]
    1768:	89a3      	ldrh	r3, [r4, #12]
    176a:	061b      	lsls	r3, r3, #24
    176c:	d503      	bpl.n	1776 <setvbuf+0x6e>
    176e:	6921      	ldr	r1, [r4, #16]
    1770:	0030      	movs	r0, r6
    1772:	f000 fb3f 	bl	1df4 <_free_r>
    1776:	89a3      	ldrh	r3, [r4, #12]
    1778:	4a36      	ldr	r2, [pc, #216]	; (1854 <setvbuf+0x14c>)
    177a:	4013      	ands	r3, r2
    177c:	81a3      	strh	r3, [r4, #12]
    177e:	9b00      	ldr	r3, [sp, #0]
    1780:	2b02      	cmp	r3, #2
    1782:	d05a      	beq.n	183a <setvbuf+0x132>
    1784:	ab03      	add	r3, sp, #12
    1786:	aa02      	add	r2, sp, #8
    1788:	0021      	movs	r1, r4
    178a:	0030      	movs	r0, r6
    178c:	f000 fac2 	bl	1d14 <__swhatbuf_r>
    1790:	89a3      	ldrh	r3, [r4, #12]
    1792:	4318      	orrs	r0, r3
    1794:	81a0      	strh	r0, [r4, #12]
    1796:	2d00      	cmp	r5, #0
    1798:	d124      	bne.n	17e4 <setvbuf+0xdc>
    179a:	9d02      	ldr	r5, [sp, #8]
    179c:	0028      	movs	r0, r5
    179e:	f000 fb1f 	bl	1de0 <malloc>
    17a2:	9501      	str	r5, [sp, #4]
    17a4:	1e07      	subs	r7, r0, #0
    17a6:	d142      	bne.n	182e <setvbuf+0x126>
    17a8:	9b02      	ldr	r3, [sp, #8]
    17aa:	9301      	str	r3, [sp, #4]
    17ac:	42ab      	cmp	r3, r5
    17ae:	d139      	bne.n	1824 <setvbuf+0x11c>
    17b0:	2001      	movs	r0, #1
    17b2:	4240      	negs	r0, r0
    17b4:	2302      	movs	r3, #2
    17b6:	89a2      	ldrh	r2, [r4, #12]
    17b8:	4313      	orrs	r3, r2
    17ba:	81a3      	strh	r3, [r4, #12]
    17bc:	2300      	movs	r3, #0
    17be:	60a3      	str	r3, [r4, #8]
    17c0:	0023      	movs	r3, r4
    17c2:	3347      	adds	r3, #71	; 0x47
    17c4:	6023      	str	r3, [r4, #0]
    17c6:	6123      	str	r3, [r4, #16]
    17c8:	2301      	movs	r3, #1
    17ca:	6163      	str	r3, [r4, #20]
    17cc:	b005      	add	sp, #20
    17ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17d0:	4b21      	ldr	r3, [pc, #132]	; (1858 <setvbuf+0x150>)
    17d2:	429c      	cmp	r4, r3
    17d4:	d101      	bne.n	17da <setvbuf+0xd2>
    17d6:	68b4      	ldr	r4, [r6, #8]
    17d8:	e7aa      	b.n	1730 <setvbuf+0x28>
    17da:	4b20      	ldr	r3, [pc, #128]	; (185c <setvbuf+0x154>)
    17dc:	429c      	cmp	r4, r3
    17de:	d1a7      	bne.n	1730 <setvbuf+0x28>
    17e0:	68f4      	ldr	r4, [r6, #12]
    17e2:	e7a5      	b.n	1730 <setvbuf+0x28>
    17e4:	2f00      	cmp	r7, #0
    17e6:	d0d9      	beq.n	179c <setvbuf+0x94>
    17e8:	69b3      	ldr	r3, [r6, #24]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d102      	bne.n	17f4 <setvbuf+0xec>
    17ee:	0030      	movs	r0, r6
    17f0:	f000 f9fa 	bl	1be8 <__sinit>
    17f4:	9b00      	ldr	r3, [sp, #0]
    17f6:	2b01      	cmp	r3, #1
    17f8:	d103      	bne.n	1802 <setvbuf+0xfa>
    17fa:	89a3      	ldrh	r3, [r4, #12]
    17fc:	9a00      	ldr	r2, [sp, #0]
    17fe:	431a      	orrs	r2, r3
    1800:	81a2      	strh	r2, [r4, #12]
    1802:	2008      	movs	r0, #8
    1804:	89a3      	ldrh	r3, [r4, #12]
    1806:	6027      	str	r7, [r4, #0]
    1808:	6127      	str	r7, [r4, #16]
    180a:	6165      	str	r5, [r4, #20]
    180c:	4018      	ands	r0, r3
    180e:	d018      	beq.n	1842 <setvbuf+0x13a>
    1810:	2001      	movs	r0, #1
    1812:	4018      	ands	r0, r3
    1814:	2300      	movs	r3, #0
    1816:	4298      	cmp	r0, r3
    1818:	d011      	beq.n	183e <setvbuf+0x136>
    181a:	426d      	negs	r5, r5
    181c:	60a3      	str	r3, [r4, #8]
    181e:	61a5      	str	r5, [r4, #24]
    1820:	0018      	movs	r0, r3
    1822:	e7d3      	b.n	17cc <setvbuf+0xc4>
    1824:	9801      	ldr	r0, [sp, #4]
    1826:	f000 fadb 	bl	1de0 <malloc>
    182a:	1e07      	subs	r7, r0, #0
    182c:	d0c0      	beq.n	17b0 <setvbuf+0xa8>
    182e:	2380      	movs	r3, #128	; 0x80
    1830:	89a2      	ldrh	r2, [r4, #12]
    1832:	9d01      	ldr	r5, [sp, #4]
    1834:	4313      	orrs	r3, r2
    1836:	81a3      	strh	r3, [r4, #12]
    1838:	e7d6      	b.n	17e8 <setvbuf+0xe0>
    183a:	2000      	movs	r0, #0
    183c:	e7ba      	b.n	17b4 <setvbuf+0xac>
    183e:	60a5      	str	r5, [r4, #8]
    1840:	e7c4      	b.n	17cc <setvbuf+0xc4>
    1842:	60a0      	str	r0, [r4, #8]
    1844:	e7c2      	b.n	17cc <setvbuf+0xc4>
    1846:	2001      	movs	r0, #1
    1848:	4240      	negs	r0, r0
    184a:	e7bf      	b.n	17cc <setvbuf+0xc4>
    184c:	20000004 	.word	0x20000004
    1850:	00002184 	.word	0x00002184
    1854:	fffff35c 	.word	0xfffff35c
    1858:	000021a4 	.word	0x000021a4
    185c:	00002164 	.word	0x00002164

00001860 <__swbuf_r>:
    1860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1862:	0005      	movs	r5, r0
    1864:	000e      	movs	r6, r1
    1866:	0014      	movs	r4, r2
    1868:	2800      	cmp	r0, #0
    186a:	d004      	beq.n	1876 <__swbuf_r+0x16>
    186c:	6983      	ldr	r3, [r0, #24]
    186e:	2b00      	cmp	r3, #0
    1870:	d101      	bne.n	1876 <__swbuf_r+0x16>
    1872:	f000 f9b9 	bl	1be8 <__sinit>
    1876:	4b22      	ldr	r3, [pc, #136]	; (1900 <__swbuf_r+0xa0>)
    1878:	429c      	cmp	r4, r3
    187a:	d12d      	bne.n	18d8 <__swbuf_r+0x78>
    187c:	686c      	ldr	r4, [r5, #4]
    187e:	69a3      	ldr	r3, [r4, #24]
    1880:	60a3      	str	r3, [r4, #8]
    1882:	89a3      	ldrh	r3, [r4, #12]
    1884:	071b      	lsls	r3, r3, #28
    1886:	d531      	bpl.n	18ec <__swbuf_r+0x8c>
    1888:	6923      	ldr	r3, [r4, #16]
    188a:	2b00      	cmp	r3, #0
    188c:	d02e      	beq.n	18ec <__swbuf_r+0x8c>
    188e:	6823      	ldr	r3, [r4, #0]
    1890:	6922      	ldr	r2, [r4, #16]
    1892:	b2f7      	uxtb	r7, r6
    1894:	1a98      	subs	r0, r3, r2
    1896:	6963      	ldr	r3, [r4, #20]
    1898:	b2f6      	uxtb	r6, r6
    189a:	4298      	cmp	r0, r3
    189c:	db05      	blt.n	18aa <__swbuf_r+0x4a>
    189e:	0021      	movs	r1, r4
    18a0:	0028      	movs	r0, r5
    18a2:	f000 f933 	bl	1b0c <_fflush_r>
    18a6:	2800      	cmp	r0, #0
    18a8:	d126      	bne.n	18f8 <__swbuf_r+0x98>
    18aa:	68a3      	ldr	r3, [r4, #8]
    18ac:	3001      	adds	r0, #1
    18ae:	3b01      	subs	r3, #1
    18b0:	60a3      	str	r3, [r4, #8]
    18b2:	6823      	ldr	r3, [r4, #0]
    18b4:	1c5a      	adds	r2, r3, #1
    18b6:	6022      	str	r2, [r4, #0]
    18b8:	701f      	strb	r7, [r3, #0]
    18ba:	6963      	ldr	r3, [r4, #20]
    18bc:	4298      	cmp	r0, r3
    18be:	d004      	beq.n	18ca <__swbuf_r+0x6a>
    18c0:	89a3      	ldrh	r3, [r4, #12]
    18c2:	07db      	lsls	r3, r3, #31
    18c4:	d51a      	bpl.n	18fc <__swbuf_r+0x9c>
    18c6:	2e0a      	cmp	r6, #10
    18c8:	d118      	bne.n	18fc <__swbuf_r+0x9c>
    18ca:	0021      	movs	r1, r4
    18cc:	0028      	movs	r0, r5
    18ce:	f000 f91d 	bl	1b0c <_fflush_r>
    18d2:	2800      	cmp	r0, #0
    18d4:	d012      	beq.n	18fc <__swbuf_r+0x9c>
    18d6:	e00f      	b.n	18f8 <__swbuf_r+0x98>
    18d8:	4b0a      	ldr	r3, [pc, #40]	; (1904 <__swbuf_r+0xa4>)
    18da:	429c      	cmp	r4, r3
    18dc:	d101      	bne.n	18e2 <__swbuf_r+0x82>
    18de:	68ac      	ldr	r4, [r5, #8]
    18e0:	e7cd      	b.n	187e <__swbuf_r+0x1e>
    18e2:	4b09      	ldr	r3, [pc, #36]	; (1908 <__swbuf_r+0xa8>)
    18e4:	429c      	cmp	r4, r3
    18e6:	d1ca      	bne.n	187e <__swbuf_r+0x1e>
    18e8:	68ec      	ldr	r4, [r5, #12]
    18ea:	e7c8      	b.n	187e <__swbuf_r+0x1e>
    18ec:	0021      	movs	r1, r4
    18ee:	0028      	movs	r0, r5
    18f0:	f000 f80c 	bl	190c <__swsetup_r>
    18f4:	2800      	cmp	r0, #0
    18f6:	d0ca      	beq.n	188e <__swbuf_r+0x2e>
    18f8:	2601      	movs	r6, #1
    18fa:	4276      	negs	r6, r6
    18fc:	0030      	movs	r0, r6
    18fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1900:	00002184 	.word	0x00002184
    1904:	000021a4 	.word	0x000021a4
    1908:	00002164 	.word	0x00002164

0000190c <__swsetup_r>:
    190c:	4b36      	ldr	r3, [pc, #216]	; (19e8 <__swsetup_r+0xdc>)
    190e:	b570      	push	{r4, r5, r6, lr}
    1910:	681d      	ldr	r5, [r3, #0]
    1912:	0006      	movs	r6, r0
    1914:	000c      	movs	r4, r1
    1916:	2d00      	cmp	r5, #0
    1918:	d005      	beq.n	1926 <__swsetup_r+0x1a>
    191a:	69ab      	ldr	r3, [r5, #24]
    191c:	2b00      	cmp	r3, #0
    191e:	d102      	bne.n	1926 <__swsetup_r+0x1a>
    1920:	0028      	movs	r0, r5
    1922:	f000 f961 	bl	1be8 <__sinit>
    1926:	4b31      	ldr	r3, [pc, #196]	; (19ec <__swsetup_r+0xe0>)
    1928:	429c      	cmp	r4, r3
    192a:	d10f      	bne.n	194c <__swsetup_r+0x40>
    192c:	686c      	ldr	r4, [r5, #4]
    192e:	230c      	movs	r3, #12
    1930:	5ee2      	ldrsh	r2, [r4, r3]
    1932:	b293      	uxth	r3, r2
    1934:	0719      	lsls	r1, r3, #28
    1936:	d42d      	bmi.n	1994 <__swsetup_r+0x88>
    1938:	06d9      	lsls	r1, r3, #27
    193a:	d411      	bmi.n	1960 <__swsetup_r+0x54>
    193c:	2309      	movs	r3, #9
    193e:	2001      	movs	r0, #1
    1940:	6033      	str	r3, [r6, #0]
    1942:	3337      	adds	r3, #55	; 0x37
    1944:	4313      	orrs	r3, r2
    1946:	81a3      	strh	r3, [r4, #12]
    1948:	4240      	negs	r0, r0
    194a:	bd70      	pop	{r4, r5, r6, pc}
    194c:	4b28      	ldr	r3, [pc, #160]	; (19f0 <__swsetup_r+0xe4>)
    194e:	429c      	cmp	r4, r3
    1950:	d101      	bne.n	1956 <__swsetup_r+0x4a>
    1952:	68ac      	ldr	r4, [r5, #8]
    1954:	e7eb      	b.n	192e <__swsetup_r+0x22>
    1956:	4b27      	ldr	r3, [pc, #156]	; (19f4 <__swsetup_r+0xe8>)
    1958:	429c      	cmp	r4, r3
    195a:	d1e8      	bne.n	192e <__swsetup_r+0x22>
    195c:	68ec      	ldr	r4, [r5, #12]
    195e:	e7e6      	b.n	192e <__swsetup_r+0x22>
    1960:	075b      	lsls	r3, r3, #29
    1962:	d513      	bpl.n	198c <__swsetup_r+0x80>
    1964:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1966:	2900      	cmp	r1, #0
    1968:	d008      	beq.n	197c <__swsetup_r+0x70>
    196a:	0023      	movs	r3, r4
    196c:	3344      	adds	r3, #68	; 0x44
    196e:	4299      	cmp	r1, r3
    1970:	d002      	beq.n	1978 <__swsetup_r+0x6c>
    1972:	0030      	movs	r0, r6
    1974:	f000 fa3e 	bl	1df4 <_free_r>
    1978:	2300      	movs	r3, #0
    197a:	6363      	str	r3, [r4, #52]	; 0x34
    197c:	2224      	movs	r2, #36	; 0x24
    197e:	89a3      	ldrh	r3, [r4, #12]
    1980:	4393      	bics	r3, r2
    1982:	81a3      	strh	r3, [r4, #12]
    1984:	2300      	movs	r3, #0
    1986:	6063      	str	r3, [r4, #4]
    1988:	6923      	ldr	r3, [r4, #16]
    198a:	6023      	str	r3, [r4, #0]
    198c:	2308      	movs	r3, #8
    198e:	89a2      	ldrh	r2, [r4, #12]
    1990:	4313      	orrs	r3, r2
    1992:	81a3      	strh	r3, [r4, #12]
    1994:	6923      	ldr	r3, [r4, #16]
    1996:	2b00      	cmp	r3, #0
    1998:	d10b      	bne.n	19b2 <__swsetup_r+0xa6>
    199a:	21a0      	movs	r1, #160	; 0xa0
    199c:	2280      	movs	r2, #128	; 0x80
    199e:	89a3      	ldrh	r3, [r4, #12]
    19a0:	0089      	lsls	r1, r1, #2
    19a2:	0092      	lsls	r2, r2, #2
    19a4:	400b      	ands	r3, r1
    19a6:	4293      	cmp	r3, r2
    19a8:	d003      	beq.n	19b2 <__swsetup_r+0xa6>
    19aa:	0021      	movs	r1, r4
    19ac:	0030      	movs	r0, r6
    19ae:	f000 f9d9 	bl	1d64 <__smakebuf_r>
    19b2:	2301      	movs	r3, #1
    19b4:	89a2      	ldrh	r2, [r4, #12]
    19b6:	4013      	ands	r3, r2
    19b8:	d011      	beq.n	19de <__swsetup_r+0xd2>
    19ba:	2300      	movs	r3, #0
    19bc:	60a3      	str	r3, [r4, #8]
    19be:	6963      	ldr	r3, [r4, #20]
    19c0:	425b      	negs	r3, r3
    19c2:	61a3      	str	r3, [r4, #24]
    19c4:	2000      	movs	r0, #0
    19c6:	6923      	ldr	r3, [r4, #16]
    19c8:	4283      	cmp	r3, r0
    19ca:	d1be      	bne.n	194a <__swsetup_r+0x3e>
    19cc:	230c      	movs	r3, #12
    19ce:	5ee2      	ldrsh	r2, [r4, r3]
    19d0:	0613      	lsls	r3, r2, #24
    19d2:	d5ba      	bpl.n	194a <__swsetup_r+0x3e>
    19d4:	2340      	movs	r3, #64	; 0x40
    19d6:	4313      	orrs	r3, r2
    19d8:	81a3      	strh	r3, [r4, #12]
    19da:	3801      	subs	r0, #1
    19dc:	e7b5      	b.n	194a <__swsetup_r+0x3e>
    19de:	0792      	lsls	r2, r2, #30
    19e0:	d400      	bmi.n	19e4 <__swsetup_r+0xd8>
    19e2:	6963      	ldr	r3, [r4, #20]
    19e4:	60a3      	str	r3, [r4, #8]
    19e6:	e7ed      	b.n	19c4 <__swsetup_r+0xb8>
    19e8:	20000004 	.word	0x20000004
    19ec:	00002184 	.word	0x00002184
    19f0:	000021a4 	.word	0x000021a4
    19f4:	00002164 	.word	0x00002164

000019f8 <__sflush_r>:
    19f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    19fa:	898a      	ldrh	r2, [r1, #12]
    19fc:	0005      	movs	r5, r0
    19fe:	000c      	movs	r4, r1
    1a00:	0713      	lsls	r3, r2, #28
    1a02:	d460      	bmi.n	1ac6 <__sflush_r+0xce>
    1a04:	684b      	ldr	r3, [r1, #4]
    1a06:	2b00      	cmp	r3, #0
    1a08:	dc04      	bgt.n	1a14 <__sflush_r+0x1c>
    1a0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	dc01      	bgt.n	1a14 <__sflush_r+0x1c>
    1a10:	2000      	movs	r0, #0
    1a12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1a16:	2f00      	cmp	r7, #0
    1a18:	d0fa      	beq.n	1a10 <__sflush_r+0x18>
    1a1a:	2300      	movs	r3, #0
    1a1c:	682e      	ldr	r6, [r5, #0]
    1a1e:	602b      	str	r3, [r5, #0]
    1a20:	2380      	movs	r3, #128	; 0x80
    1a22:	015b      	lsls	r3, r3, #5
    1a24:	401a      	ands	r2, r3
    1a26:	d034      	beq.n	1a92 <__sflush_r+0x9a>
    1a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1a2a:	89a3      	ldrh	r3, [r4, #12]
    1a2c:	075b      	lsls	r3, r3, #29
    1a2e:	d506      	bpl.n	1a3e <__sflush_r+0x46>
    1a30:	6863      	ldr	r3, [r4, #4]
    1a32:	1ac0      	subs	r0, r0, r3
    1a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1a36:	2b00      	cmp	r3, #0
    1a38:	d001      	beq.n	1a3e <__sflush_r+0x46>
    1a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1a3c:	1ac0      	subs	r0, r0, r3
    1a3e:	0002      	movs	r2, r0
    1a40:	6a21      	ldr	r1, [r4, #32]
    1a42:	2300      	movs	r3, #0
    1a44:	0028      	movs	r0, r5
    1a46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1a48:	47b8      	blx	r7
    1a4a:	89a1      	ldrh	r1, [r4, #12]
    1a4c:	1c43      	adds	r3, r0, #1
    1a4e:	d106      	bne.n	1a5e <__sflush_r+0x66>
    1a50:	682b      	ldr	r3, [r5, #0]
    1a52:	2b1d      	cmp	r3, #29
    1a54:	d831      	bhi.n	1aba <__sflush_r+0xc2>
    1a56:	4a2c      	ldr	r2, [pc, #176]	; (1b08 <__sflush_r+0x110>)
    1a58:	40da      	lsrs	r2, r3
    1a5a:	07d3      	lsls	r3, r2, #31
    1a5c:	d52d      	bpl.n	1aba <__sflush_r+0xc2>
    1a5e:	2300      	movs	r3, #0
    1a60:	6063      	str	r3, [r4, #4]
    1a62:	6923      	ldr	r3, [r4, #16]
    1a64:	6023      	str	r3, [r4, #0]
    1a66:	04cb      	lsls	r3, r1, #19
    1a68:	d505      	bpl.n	1a76 <__sflush_r+0x7e>
    1a6a:	1c43      	adds	r3, r0, #1
    1a6c:	d102      	bne.n	1a74 <__sflush_r+0x7c>
    1a6e:	682b      	ldr	r3, [r5, #0]
    1a70:	2b00      	cmp	r3, #0
    1a72:	d100      	bne.n	1a76 <__sflush_r+0x7e>
    1a74:	6560      	str	r0, [r4, #84]	; 0x54
    1a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a78:	602e      	str	r6, [r5, #0]
    1a7a:	2900      	cmp	r1, #0
    1a7c:	d0c8      	beq.n	1a10 <__sflush_r+0x18>
    1a7e:	0023      	movs	r3, r4
    1a80:	3344      	adds	r3, #68	; 0x44
    1a82:	4299      	cmp	r1, r3
    1a84:	d002      	beq.n	1a8c <__sflush_r+0x94>
    1a86:	0028      	movs	r0, r5
    1a88:	f000 f9b4 	bl	1df4 <_free_r>
    1a8c:	2000      	movs	r0, #0
    1a8e:	6360      	str	r0, [r4, #52]	; 0x34
    1a90:	e7bf      	b.n	1a12 <__sflush_r+0x1a>
    1a92:	2301      	movs	r3, #1
    1a94:	6a21      	ldr	r1, [r4, #32]
    1a96:	0028      	movs	r0, r5
    1a98:	47b8      	blx	r7
    1a9a:	1c43      	adds	r3, r0, #1
    1a9c:	d1c5      	bne.n	1a2a <__sflush_r+0x32>
    1a9e:	682b      	ldr	r3, [r5, #0]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d0c2      	beq.n	1a2a <__sflush_r+0x32>
    1aa4:	2b1d      	cmp	r3, #29
    1aa6:	d001      	beq.n	1aac <__sflush_r+0xb4>
    1aa8:	2b16      	cmp	r3, #22
    1aaa:	d101      	bne.n	1ab0 <__sflush_r+0xb8>
    1aac:	602e      	str	r6, [r5, #0]
    1aae:	e7af      	b.n	1a10 <__sflush_r+0x18>
    1ab0:	2340      	movs	r3, #64	; 0x40
    1ab2:	89a2      	ldrh	r2, [r4, #12]
    1ab4:	4313      	orrs	r3, r2
    1ab6:	81a3      	strh	r3, [r4, #12]
    1ab8:	e7ab      	b.n	1a12 <__sflush_r+0x1a>
    1aba:	2340      	movs	r3, #64	; 0x40
    1abc:	430b      	orrs	r3, r1
    1abe:	2001      	movs	r0, #1
    1ac0:	81a3      	strh	r3, [r4, #12]
    1ac2:	4240      	negs	r0, r0
    1ac4:	e7a5      	b.n	1a12 <__sflush_r+0x1a>
    1ac6:	690f      	ldr	r7, [r1, #16]
    1ac8:	2f00      	cmp	r7, #0
    1aca:	d0a1      	beq.n	1a10 <__sflush_r+0x18>
    1acc:	680b      	ldr	r3, [r1, #0]
    1ace:	600f      	str	r7, [r1, #0]
    1ad0:	1bdb      	subs	r3, r3, r7
    1ad2:	9301      	str	r3, [sp, #4]
    1ad4:	2300      	movs	r3, #0
    1ad6:	0792      	lsls	r2, r2, #30
    1ad8:	d100      	bne.n	1adc <__sflush_r+0xe4>
    1ada:	694b      	ldr	r3, [r1, #20]
    1adc:	60a3      	str	r3, [r4, #8]
    1ade:	9b01      	ldr	r3, [sp, #4]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	dc00      	bgt.n	1ae6 <__sflush_r+0xee>
    1ae4:	e794      	b.n	1a10 <__sflush_r+0x18>
    1ae6:	9b01      	ldr	r3, [sp, #4]
    1ae8:	003a      	movs	r2, r7
    1aea:	6a21      	ldr	r1, [r4, #32]
    1aec:	0028      	movs	r0, r5
    1aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1af0:	47b0      	blx	r6
    1af2:	2800      	cmp	r0, #0
    1af4:	dc03      	bgt.n	1afe <__sflush_r+0x106>
    1af6:	2340      	movs	r3, #64	; 0x40
    1af8:	89a2      	ldrh	r2, [r4, #12]
    1afa:	4313      	orrs	r3, r2
    1afc:	e7df      	b.n	1abe <__sflush_r+0xc6>
    1afe:	9b01      	ldr	r3, [sp, #4]
    1b00:	183f      	adds	r7, r7, r0
    1b02:	1a1b      	subs	r3, r3, r0
    1b04:	9301      	str	r3, [sp, #4]
    1b06:	e7ea      	b.n	1ade <__sflush_r+0xe6>
    1b08:	20400001 	.word	0x20400001

00001b0c <_fflush_r>:
    1b0c:	690b      	ldr	r3, [r1, #16]
    1b0e:	b570      	push	{r4, r5, r6, lr}
    1b10:	0005      	movs	r5, r0
    1b12:	000c      	movs	r4, r1
    1b14:	2b00      	cmp	r3, #0
    1b16:	d101      	bne.n	1b1c <_fflush_r+0x10>
    1b18:	2000      	movs	r0, #0
    1b1a:	bd70      	pop	{r4, r5, r6, pc}
    1b1c:	2800      	cmp	r0, #0
    1b1e:	d004      	beq.n	1b2a <_fflush_r+0x1e>
    1b20:	6983      	ldr	r3, [r0, #24]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d101      	bne.n	1b2a <_fflush_r+0x1e>
    1b26:	f000 f85f 	bl	1be8 <__sinit>
    1b2a:	4b0b      	ldr	r3, [pc, #44]	; (1b58 <_fflush_r+0x4c>)
    1b2c:	429c      	cmp	r4, r3
    1b2e:	d109      	bne.n	1b44 <_fflush_r+0x38>
    1b30:	686c      	ldr	r4, [r5, #4]
    1b32:	220c      	movs	r2, #12
    1b34:	5ea3      	ldrsh	r3, [r4, r2]
    1b36:	2b00      	cmp	r3, #0
    1b38:	d0ee      	beq.n	1b18 <_fflush_r+0xc>
    1b3a:	0021      	movs	r1, r4
    1b3c:	0028      	movs	r0, r5
    1b3e:	f7ff ff5b 	bl	19f8 <__sflush_r>
    1b42:	e7ea      	b.n	1b1a <_fflush_r+0xe>
    1b44:	4b05      	ldr	r3, [pc, #20]	; (1b5c <_fflush_r+0x50>)
    1b46:	429c      	cmp	r4, r3
    1b48:	d101      	bne.n	1b4e <_fflush_r+0x42>
    1b4a:	68ac      	ldr	r4, [r5, #8]
    1b4c:	e7f1      	b.n	1b32 <_fflush_r+0x26>
    1b4e:	4b04      	ldr	r3, [pc, #16]	; (1b60 <_fflush_r+0x54>)
    1b50:	429c      	cmp	r4, r3
    1b52:	d1ee      	bne.n	1b32 <_fflush_r+0x26>
    1b54:	68ec      	ldr	r4, [r5, #12]
    1b56:	e7ec      	b.n	1b32 <_fflush_r+0x26>
    1b58:	00002184 	.word	0x00002184
    1b5c:	000021a4 	.word	0x000021a4
    1b60:	00002164 	.word	0x00002164

00001b64 <_cleanup_r>:
    1b64:	b510      	push	{r4, lr}
    1b66:	4902      	ldr	r1, [pc, #8]	; (1b70 <_cleanup_r+0xc>)
    1b68:	f000 f8b2 	bl	1cd0 <_fwalk_reent>
    1b6c:	bd10      	pop	{r4, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	00001b0d 	.word	0x00001b0d

00001b74 <std.isra.0>:
    1b74:	2300      	movs	r3, #0
    1b76:	b510      	push	{r4, lr}
    1b78:	0004      	movs	r4, r0
    1b7a:	6003      	str	r3, [r0, #0]
    1b7c:	6043      	str	r3, [r0, #4]
    1b7e:	6083      	str	r3, [r0, #8]
    1b80:	8181      	strh	r1, [r0, #12]
    1b82:	6643      	str	r3, [r0, #100]	; 0x64
    1b84:	81c2      	strh	r2, [r0, #14]
    1b86:	6103      	str	r3, [r0, #16]
    1b88:	6143      	str	r3, [r0, #20]
    1b8a:	6183      	str	r3, [r0, #24]
    1b8c:	0019      	movs	r1, r3
    1b8e:	2208      	movs	r2, #8
    1b90:	305c      	adds	r0, #92	; 0x5c
    1b92:	f7ff fd3d 	bl	1610 <memset>
    1b96:	4b05      	ldr	r3, [pc, #20]	; (1bac <std.isra.0+0x38>)
    1b98:	6224      	str	r4, [r4, #32]
    1b9a:	6263      	str	r3, [r4, #36]	; 0x24
    1b9c:	4b04      	ldr	r3, [pc, #16]	; (1bb0 <std.isra.0+0x3c>)
    1b9e:	62a3      	str	r3, [r4, #40]	; 0x28
    1ba0:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <std.isra.0+0x40>)
    1ba2:	62e3      	str	r3, [r4, #44]	; 0x2c
    1ba4:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <std.isra.0+0x44>)
    1ba6:	6323      	str	r3, [r4, #48]	; 0x30
    1ba8:	bd10      	pop	{r4, pc}
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	00001f69 	.word	0x00001f69
    1bb0:	00001f91 	.word	0x00001f91
    1bb4:	00001fc9 	.word	0x00001fc9
    1bb8:	00001ff5 	.word	0x00001ff5

00001bbc <__sfmoreglue>:
    1bbc:	b570      	push	{r4, r5, r6, lr}
    1bbe:	2568      	movs	r5, #104	; 0x68
    1bc0:	1e4a      	subs	r2, r1, #1
    1bc2:	4355      	muls	r5, r2
    1bc4:	000e      	movs	r6, r1
    1bc6:	0029      	movs	r1, r5
    1bc8:	3174      	adds	r1, #116	; 0x74
    1bca:	f000 f95d 	bl	1e88 <_malloc_r>
    1bce:	1e04      	subs	r4, r0, #0
    1bd0:	d008      	beq.n	1be4 <__sfmoreglue+0x28>
    1bd2:	2100      	movs	r1, #0
    1bd4:	002a      	movs	r2, r5
    1bd6:	6001      	str	r1, [r0, #0]
    1bd8:	6046      	str	r6, [r0, #4]
    1bda:	300c      	adds	r0, #12
    1bdc:	60a0      	str	r0, [r4, #8]
    1bde:	3268      	adds	r2, #104	; 0x68
    1be0:	f7ff fd16 	bl	1610 <memset>
    1be4:	0020      	movs	r0, r4
    1be6:	bd70      	pop	{r4, r5, r6, pc}

00001be8 <__sinit>:
    1be8:	6983      	ldr	r3, [r0, #24]
    1bea:	b513      	push	{r0, r1, r4, lr}
    1bec:	0004      	movs	r4, r0
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d128      	bne.n	1c44 <__sinit+0x5c>
    1bf2:	6483      	str	r3, [r0, #72]	; 0x48
    1bf4:	64c3      	str	r3, [r0, #76]	; 0x4c
    1bf6:	6503      	str	r3, [r0, #80]	; 0x50
    1bf8:	4b13      	ldr	r3, [pc, #76]	; (1c48 <__sinit+0x60>)
    1bfa:	4a14      	ldr	r2, [pc, #80]	; (1c4c <__sinit+0x64>)
    1bfc:	681b      	ldr	r3, [r3, #0]
    1bfe:	6282      	str	r2, [r0, #40]	; 0x28
    1c00:	9301      	str	r3, [sp, #4]
    1c02:	4298      	cmp	r0, r3
    1c04:	d101      	bne.n	1c0a <__sinit+0x22>
    1c06:	2301      	movs	r3, #1
    1c08:	6183      	str	r3, [r0, #24]
    1c0a:	0020      	movs	r0, r4
    1c0c:	f000 f820 	bl	1c50 <__sfp>
    1c10:	6060      	str	r0, [r4, #4]
    1c12:	0020      	movs	r0, r4
    1c14:	f000 f81c 	bl	1c50 <__sfp>
    1c18:	60a0      	str	r0, [r4, #8]
    1c1a:	0020      	movs	r0, r4
    1c1c:	f000 f818 	bl	1c50 <__sfp>
    1c20:	2200      	movs	r2, #0
    1c22:	60e0      	str	r0, [r4, #12]
    1c24:	2104      	movs	r1, #4
    1c26:	6860      	ldr	r0, [r4, #4]
    1c28:	f7ff ffa4 	bl	1b74 <std.isra.0>
    1c2c:	2201      	movs	r2, #1
    1c2e:	2109      	movs	r1, #9
    1c30:	68a0      	ldr	r0, [r4, #8]
    1c32:	f7ff ff9f 	bl	1b74 <std.isra.0>
    1c36:	2202      	movs	r2, #2
    1c38:	2112      	movs	r1, #18
    1c3a:	68e0      	ldr	r0, [r4, #12]
    1c3c:	f7ff ff9a 	bl	1b74 <std.isra.0>
    1c40:	2301      	movs	r3, #1
    1c42:	61a3      	str	r3, [r4, #24]
    1c44:	bd13      	pop	{r0, r1, r4, pc}
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	00002160 	.word	0x00002160
    1c4c:	00001b65 	.word	0x00001b65

00001c50 <__sfp>:
    1c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c52:	4b1e      	ldr	r3, [pc, #120]	; (1ccc <__sfp+0x7c>)
    1c54:	0007      	movs	r7, r0
    1c56:	681e      	ldr	r6, [r3, #0]
    1c58:	69b3      	ldr	r3, [r6, #24]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d102      	bne.n	1c64 <__sfp+0x14>
    1c5e:	0030      	movs	r0, r6
    1c60:	f7ff ffc2 	bl	1be8 <__sinit>
    1c64:	3648      	adds	r6, #72	; 0x48
    1c66:	68b4      	ldr	r4, [r6, #8]
    1c68:	6873      	ldr	r3, [r6, #4]
    1c6a:	3b01      	subs	r3, #1
    1c6c:	d504      	bpl.n	1c78 <__sfp+0x28>
    1c6e:	6833      	ldr	r3, [r6, #0]
    1c70:	2b00      	cmp	r3, #0
    1c72:	d007      	beq.n	1c84 <__sfp+0x34>
    1c74:	6836      	ldr	r6, [r6, #0]
    1c76:	e7f6      	b.n	1c66 <__sfp+0x16>
    1c78:	220c      	movs	r2, #12
    1c7a:	5ea5      	ldrsh	r5, [r4, r2]
    1c7c:	2d00      	cmp	r5, #0
    1c7e:	d00d      	beq.n	1c9c <__sfp+0x4c>
    1c80:	3468      	adds	r4, #104	; 0x68
    1c82:	e7f2      	b.n	1c6a <__sfp+0x1a>
    1c84:	2104      	movs	r1, #4
    1c86:	0038      	movs	r0, r7
    1c88:	f7ff ff98 	bl	1bbc <__sfmoreglue>
    1c8c:	6030      	str	r0, [r6, #0]
    1c8e:	2800      	cmp	r0, #0
    1c90:	d1f0      	bne.n	1c74 <__sfp+0x24>
    1c92:	230c      	movs	r3, #12
    1c94:	0004      	movs	r4, r0
    1c96:	603b      	str	r3, [r7, #0]
    1c98:	0020      	movs	r0, r4
    1c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c9c:	2301      	movs	r3, #1
    1c9e:	0020      	movs	r0, r4
    1ca0:	425b      	negs	r3, r3
    1ca2:	81e3      	strh	r3, [r4, #14]
    1ca4:	3302      	adds	r3, #2
    1ca6:	81a3      	strh	r3, [r4, #12]
    1ca8:	6665      	str	r5, [r4, #100]	; 0x64
    1caa:	6025      	str	r5, [r4, #0]
    1cac:	60a5      	str	r5, [r4, #8]
    1cae:	6065      	str	r5, [r4, #4]
    1cb0:	6125      	str	r5, [r4, #16]
    1cb2:	6165      	str	r5, [r4, #20]
    1cb4:	61a5      	str	r5, [r4, #24]
    1cb6:	2208      	movs	r2, #8
    1cb8:	0029      	movs	r1, r5
    1cba:	305c      	adds	r0, #92	; 0x5c
    1cbc:	f7ff fca8 	bl	1610 <memset>
    1cc0:	6365      	str	r5, [r4, #52]	; 0x34
    1cc2:	63a5      	str	r5, [r4, #56]	; 0x38
    1cc4:	64a5      	str	r5, [r4, #72]	; 0x48
    1cc6:	64e5      	str	r5, [r4, #76]	; 0x4c
    1cc8:	e7e6      	b.n	1c98 <__sfp+0x48>
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	00002160 	.word	0x00002160

00001cd0 <_fwalk_reent>:
    1cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1cd2:	0004      	movs	r4, r0
    1cd4:	0007      	movs	r7, r0
    1cd6:	2600      	movs	r6, #0
    1cd8:	9101      	str	r1, [sp, #4]
    1cda:	3448      	adds	r4, #72	; 0x48
    1cdc:	2c00      	cmp	r4, #0
    1cde:	d101      	bne.n	1ce4 <_fwalk_reent+0x14>
    1ce0:	0030      	movs	r0, r6
    1ce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1ce4:	6863      	ldr	r3, [r4, #4]
    1ce6:	68a5      	ldr	r5, [r4, #8]
    1ce8:	9300      	str	r3, [sp, #0]
    1cea:	9b00      	ldr	r3, [sp, #0]
    1cec:	3b01      	subs	r3, #1
    1cee:	9300      	str	r3, [sp, #0]
    1cf0:	d501      	bpl.n	1cf6 <_fwalk_reent+0x26>
    1cf2:	6824      	ldr	r4, [r4, #0]
    1cf4:	e7f2      	b.n	1cdc <_fwalk_reent+0xc>
    1cf6:	89ab      	ldrh	r3, [r5, #12]
    1cf8:	2b01      	cmp	r3, #1
    1cfa:	d908      	bls.n	1d0e <_fwalk_reent+0x3e>
    1cfc:	220e      	movs	r2, #14
    1cfe:	5eab      	ldrsh	r3, [r5, r2]
    1d00:	3301      	adds	r3, #1
    1d02:	d004      	beq.n	1d0e <_fwalk_reent+0x3e>
    1d04:	0029      	movs	r1, r5
    1d06:	0038      	movs	r0, r7
    1d08:	9b01      	ldr	r3, [sp, #4]
    1d0a:	4798      	blx	r3
    1d0c:	4306      	orrs	r6, r0
    1d0e:	3568      	adds	r5, #104	; 0x68
    1d10:	e7eb      	b.n	1cea <_fwalk_reent+0x1a>
	...

00001d14 <__swhatbuf_r>:
    1d14:	b570      	push	{r4, r5, r6, lr}
    1d16:	000e      	movs	r6, r1
    1d18:	001d      	movs	r5, r3
    1d1a:	230e      	movs	r3, #14
    1d1c:	5ec9      	ldrsh	r1, [r1, r3]
    1d1e:	b090      	sub	sp, #64	; 0x40
    1d20:	0014      	movs	r4, r2
    1d22:	2900      	cmp	r1, #0
    1d24:	da07      	bge.n	1d36 <__swhatbuf_r+0x22>
    1d26:	2300      	movs	r3, #0
    1d28:	602b      	str	r3, [r5, #0]
    1d2a:	89b3      	ldrh	r3, [r6, #12]
    1d2c:	061b      	lsls	r3, r3, #24
    1d2e:	d411      	bmi.n	1d54 <__swhatbuf_r+0x40>
    1d30:	2380      	movs	r3, #128	; 0x80
    1d32:	00db      	lsls	r3, r3, #3
    1d34:	e00f      	b.n	1d56 <__swhatbuf_r+0x42>
    1d36:	aa01      	add	r2, sp, #4
    1d38:	f000 f988 	bl	204c <_fstat_r>
    1d3c:	2800      	cmp	r0, #0
    1d3e:	dbf2      	blt.n	1d26 <__swhatbuf_r+0x12>
    1d40:	22f0      	movs	r2, #240	; 0xf0
    1d42:	9b02      	ldr	r3, [sp, #8]
    1d44:	0212      	lsls	r2, r2, #8
    1d46:	4013      	ands	r3, r2
    1d48:	4a05      	ldr	r2, [pc, #20]	; (1d60 <__swhatbuf_r+0x4c>)
    1d4a:	189b      	adds	r3, r3, r2
    1d4c:	425a      	negs	r2, r3
    1d4e:	4153      	adcs	r3, r2
    1d50:	602b      	str	r3, [r5, #0]
    1d52:	e7ed      	b.n	1d30 <__swhatbuf_r+0x1c>
    1d54:	2340      	movs	r3, #64	; 0x40
    1d56:	2000      	movs	r0, #0
    1d58:	6023      	str	r3, [r4, #0]
    1d5a:	b010      	add	sp, #64	; 0x40
    1d5c:	bd70      	pop	{r4, r5, r6, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	ffffe000 	.word	0xffffe000

00001d64 <__smakebuf_r>:
    1d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d66:	2602      	movs	r6, #2
    1d68:	898b      	ldrh	r3, [r1, #12]
    1d6a:	0005      	movs	r5, r0
    1d6c:	000c      	movs	r4, r1
    1d6e:	4233      	tst	r3, r6
    1d70:	d006      	beq.n	1d80 <__smakebuf_r+0x1c>
    1d72:	0023      	movs	r3, r4
    1d74:	3347      	adds	r3, #71	; 0x47
    1d76:	6023      	str	r3, [r4, #0]
    1d78:	6123      	str	r3, [r4, #16]
    1d7a:	2301      	movs	r3, #1
    1d7c:	6163      	str	r3, [r4, #20]
    1d7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1d80:	ab01      	add	r3, sp, #4
    1d82:	466a      	mov	r2, sp
    1d84:	f7ff ffc6 	bl	1d14 <__swhatbuf_r>
    1d88:	9900      	ldr	r1, [sp, #0]
    1d8a:	0007      	movs	r7, r0
    1d8c:	0028      	movs	r0, r5
    1d8e:	f000 f87b 	bl	1e88 <_malloc_r>
    1d92:	2800      	cmp	r0, #0
    1d94:	d106      	bne.n	1da4 <__smakebuf_r+0x40>
    1d96:	220c      	movs	r2, #12
    1d98:	5ea3      	ldrsh	r3, [r4, r2]
    1d9a:	059a      	lsls	r2, r3, #22
    1d9c:	d4ef      	bmi.n	1d7e <__smakebuf_r+0x1a>
    1d9e:	431e      	orrs	r6, r3
    1da0:	81a6      	strh	r6, [r4, #12]
    1da2:	e7e6      	b.n	1d72 <__smakebuf_r+0xe>
    1da4:	4b0d      	ldr	r3, [pc, #52]	; (1ddc <__smakebuf_r+0x78>)
    1da6:	62ab      	str	r3, [r5, #40]	; 0x28
    1da8:	2380      	movs	r3, #128	; 0x80
    1daa:	89a2      	ldrh	r2, [r4, #12]
    1dac:	6020      	str	r0, [r4, #0]
    1dae:	4313      	orrs	r3, r2
    1db0:	81a3      	strh	r3, [r4, #12]
    1db2:	9b00      	ldr	r3, [sp, #0]
    1db4:	6120      	str	r0, [r4, #16]
    1db6:	6163      	str	r3, [r4, #20]
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d00a      	beq.n	1dd4 <__smakebuf_r+0x70>
    1dbe:	230e      	movs	r3, #14
    1dc0:	5ee1      	ldrsh	r1, [r4, r3]
    1dc2:	0028      	movs	r0, r5
    1dc4:	f000 f954 	bl	2070 <_isatty_r>
    1dc8:	2800      	cmp	r0, #0
    1dca:	d003      	beq.n	1dd4 <__smakebuf_r+0x70>
    1dcc:	2301      	movs	r3, #1
    1dce:	89a2      	ldrh	r2, [r4, #12]
    1dd0:	4313      	orrs	r3, r2
    1dd2:	81a3      	strh	r3, [r4, #12]
    1dd4:	89a0      	ldrh	r0, [r4, #12]
    1dd6:	4338      	orrs	r0, r7
    1dd8:	81a0      	strh	r0, [r4, #12]
    1dda:	e7d0      	b.n	1d7e <__smakebuf_r+0x1a>
    1ddc:	00001b65 	.word	0x00001b65

00001de0 <malloc>:
    1de0:	b510      	push	{r4, lr}
    1de2:	4b03      	ldr	r3, [pc, #12]	; (1df0 <malloc+0x10>)
    1de4:	0001      	movs	r1, r0
    1de6:	6818      	ldr	r0, [r3, #0]
    1de8:	f000 f84e 	bl	1e88 <_malloc_r>
    1dec:	bd10      	pop	{r4, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	20000004 	.word	0x20000004

00001df4 <_free_r>:
    1df4:	b570      	push	{r4, r5, r6, lr}
    1df6:	0005      	movs	r5, r0
    1df8:	2900      	cmp	r1, #0
    1dfa:	d010      	beq.n	1e1e <_free_r+0x2a>
    1dfc:	1f0c      	subs	r4, r1, #4
    1dfe:	6823      	ldr	r3, [r4, #0]
    1e00:	2b00      	cmp	r3, #0
    1e02:	da00      	bge.n	1e06 <_free_r+0x12>
    1e04:	18e4      	adds	r4, r4, r3
    1e06:	0028      	movs	r0, r5
    1e08:	f000 f958 	bl	20bc <__malloc_lock>
    1e0c:	4a1d      	ldr	r2, [pc, #116]	; (1e84 <_free_r+0x90>)
    1e0e:	6813      	ldr	r3, [r2, #0]
    1e10:	2b00      	cmp	r3, #0
    1e12:	d105      	bne.n	1e20 <_free_r+0x2c>
    1e14:	6063      	str	r3, [r4, #4]
    1e16:	6014      	str	r4, [r2, #0]
    1e18:	0028      	movs	r0, r5
    1e1a:	f000 f950 	bl	20be <__malloc_unlock>
    1e1e:	bd70      	pop	{r4, r5, r6, pc}
    1e20:	42a3      	cmp	r3, r4
    1e22:	d909      	bls.n	1e38 <_free_r+0x44>
    1e24:	6821      	ldr	r1, [r4, #0]
    1e26:	1860      	adds	r0, r4, r1
    1e28:	4283      	cmp	r3, r0
    1e2a:	d1f3      	bne.n	1e14 <_free_r+0x20>
    1e2c:	6818      	ldr	r0, [r3, #0]
    1e2e:	685b      	ldr	r3, [r3, #4]
    1e30:	1841      	adds	r1, r0, r1
    1e32:	6021      	str	r1, [r4, #0]
    1e34:	e7ee      	b.n	1e14 <_free_r+0x20>
    1e36:	0013      	movs	r3, r2
    1e38:	685a      	ldr	r2, [r3, #4]
    1e3a:	2a00      	cmp	r2, #0
    1e3c:	d001      	beq.n	1e42 <_free_r+0x4e>
    1e3e:	42a2      	cmp	r2, r4
    1e40:	d9f9      	bls.n	1e36 <_free_r+0x42>
    1e42:	6819      	ldr	r1, [r3, #0]
    1e44:	1858      	adds	r0, r3, r1
    1e46:	42a0      	cmp	r0, r4
    1e48:	d10b      	bne.n	1e62 <_free_r+0x6e>
    1e4a:	6820      	ldr	r0, [r4, #0]
    1e4c:	1809      	adds	r1, r1, r0
    1e4e:	1858      	adds	r0, r3, r1
    1e50:	6019      	str	r1, [r3, #0]
    1e52:	4282      	cmp	r2, r0
    1e54:	d1e0      	bne.n	1e18 <_free_r+0x24>
    1e56:	6810      	ldr	r0, [r2, #0]
    1e58:	6852      	ldr	r2, [r2, #4]
    1e5a:	1841      	adds	r1, r0, r1
    1e5c:	6019      	str	r1, [r3, #0]
    1e5e:	605a      	str	r2, [r3, #4]
    1e60:	e7da      	b.n	1e18 <_free_r+0x24>
    1e62:	42a0      	cmp	r0, r4
    1e64:	d902      	bls.n	1e6c <_free_r+0x78>
    1e66:	230c      	movs	r3, #12
    1e68:	602b      	str	r3, [r5, #0]
    1e6a:	e7d5      	b.n	1e18 <_free_r+0x24>
    1e6c:	6821      	ldr	r1, [r4, #0]
    1e6e:	1860      	adds	r0, r4, r1
    1e70:	4282      	cmp	r2, r0
    1e72:	d103      	bne.n	1e7c <_free_r+0x88>
    1e74:	6810      	ldr	r0, [r2, #0]
    1e76:	6852      	ldr	r2, [r2, #4]
    1e78:	1841      	adds	r1, r0, r1
    1e7a:	6021      	str	r1, [r4, #0]
    1e7c:	6062      	str	r2, [r4, #4]
    1e7e:	605c      	str	r4, [r3, #4]
    1e80:	e7ca      	b.n	1e18 <_free_r+0x24>
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	200000c4 	.word	0x200000c4

00001e88 <_malloc_r>:
    1e88:	2303      	movs	r3, #3
    1e8a:	b570      	push	{r4, r5, r6, lr}
    1e8c:	1ccd      	adds	r5, r1, #3
    1e8e:	439d      	bics	r5, r3
    1e90:	3508      	adds	r5, #8
    1e92:	0006      	movs	r6, r0
    1e94:	2d0c      	cmp	r5, #12
    1e96:	d21e      	bcs.n	1ed6 <_malloc_r+0x4e>
    1e98:	250c      	movs	r5, #12
    1e9a:	42a9      	cmp	r1, r5
    1e9c:	d81d      	bhi.n	1eda <_malloc_r+0x52>
    1e9e:	0030      	movs	r0, r6
    1ea0:	f000 f90c 	bl	20bc <__malloc_lock>
    1ea4:	4a25      	ldr	r2, [pc, #148]	; (1f3c <_malloc_r+0xb4>)
    1ea6:	6814      	ldr	r4, [r2, #0]
    1ea8:	0021      	movs	r1, r4
    1eaa:	2900      	cmp	r1, #0
    1eac:	d119      	bne.n	1ee2 <_malloc_r+0x5a>
    1eae:	4c24      	ldr	r4, [pc, #144]	; (1f40 <_malloc_r+0xb8>)
    1eb0:	6823      	ldr	r3, [r4, #0]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d103      	bne.n	1ebe <_malloc_r+0x36>
    1eb6:	0030      	movs	r0, r6
    1eb8:	f000 f844 	bl	1f44 <_sbrk_r>
    1ebc:	6020      	str	r0, [r4, #0]
    1ebe:	0029      	movs	r1, r5
    1ec0:	0030      	movs	r0, r6
    1ec2:	f000 f83f 	bl	1f44 <_sbrk_r>
    1ec6:	1c43      	adds	r3, r0, #1
    1ec8:	d12c      	bne.n	1f24 <_malloc_r+0x9c>
    1eca:	230c      	movs	r3, #12
    1ecc:	0030      	movs	r0, r6
    1ece:	6033      	str	r3, [r6, #0]
    1ed0:	f000 f8f5 	bl	20be <__malloc_unlock>
    1ed4:	e003      	b.n	1ede <_malloc_r+0x56>
    1ed6:	2d00      	cmp	r5, #0
    1ed8:	dadf      	bge.n	1e9a <_malloc_r+0x12>
    1eda:	230c      	movs	r3, #12
    1edc:	6033      	str	r3, [r6, #0]
    1ede:	2000      	movs	r0, #0
    1ee0:	bd70      	pop	{r4, r5, r6, pc}
    1ee2:	680b      	ldr	r3, [r1, #0]
    1ee4:	1b5b      	subs	r3, r3, r5
    1ee6:	d41a      	bmi.n	1f1e <_malloc_r+0x96>
    1ee8:	2b0b      	cmp	r3, #11
    1eea:	d903      	bls.n	1ef4 <_malloc_r+0x6c>
    1eec:	600b      	str	r3, [r1, #0]
    1eee:	18cc      	adds	r4, r1, r3
    1ef0:	6025      	str	r5, [r4, #0]
    1ef2:	e003      	b.n	1efc <_malloc_r+0x74>
    1ef4:	428c      	cmp	r4, r1
    1ef6:	d10e      	bne.n	1f16 <_malloc_r+0x8e>
    1ef8:	6863      	ldr	r3, [r4, #4]
    1efa:	6013      	str	r3, [r2, #0]
    1efc:	0030      	movs	r0, r6
    1efe:	f000 f8de 	bl	20be <__malloc_unlock>
    1f02:	0020      	movs	r0, r4
    1f04:	2207      	movs	r2, #7
    1f06:	300b      	adds	r0, #11
    1f08:	1d23      	adds	r3, r4, #4
    1f0a:	4390      	bics	r0, r2
    1f0c:	1ac3      	subs	r3, r0, r3
    1f0e:	d0e7      	beq.n	1ee0 <_malloc_r+0x58>
    1f10:	425a      	negs	r2, r3
    1f12:	50e2      	str	r2, [r4, r3]
    1f14:	e7e4      	b.n	1ee0 <_malloc_r+0x58>
    1f16:	684b      	ldr	r3, [r1, #4]
    1f18:	6063      	str	r3, [r4, #4]
    1f1a:	000c      	movs	r4, r1
    1f1c:	e7ee      	b.n	1efc <_malloc_r+0x74>
    1f1e:	000c      	movs	r4, r1
    1f20:	6849      	ldr	r1, [r1, #4]
    1f22:	e7c2      	b.n	1eaa <_malloc_r+0x22>
    1f24:	2303      	movs	r3, #3
    1f26:	1cc4      	adds	r4, r0, #3
    1f28:	439c      	bics	r4, r3
    1f2a:	42a0      	cmp	r0, r4
    1f2c:	d0e0      	beq.n	1ef0 <_malloc_r+0x68>
    1f2e:	1a21      	subs	r1, r4, r0
    1f30:	0030      	movs	r0, r6
    1f32:	f000 f807 	bl	1f44 <_sbrk_r>
    1f36:	1c43      	adds	r3, r0, #1
    1f38:	d1da      	bne.n	1ef0 <_malloc_r+0x68>
    1f3a:	e7c6      	b.n	1eca <_malloc_r+0x42>
    1f3c:	200000c4 	.word	0x200000c4
    1f40:	200000c8 	.word	0x200000c8

00001f44 <_sbrk_r>:
    1f44:	2300      	movs	r3, #0
    1f46:	b570      	push	{r4, r5, r6, lr}
    1f48:	4c06      	ldr	r4, [pc, #24]	; (1f64 <_sbrk_r+0x20>)
    1f4a:	0005      	movs	r5, r0
    1f4c:	0008      	movs	r0, r1
    1f4e:	6023      	str	r3, [r4, #0]
    1f50:	f7ff f9ae 	bl	12b0 <_sbrk>
    1f54:	1c43      	adds	r3, r0, #1
    1f56:	d103      	bne.n	1f60 <_sbrk_r+0x1c>
    1f58:	6823      	ldr	r3, [r4, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d000      	beq.n	1f60 <_sbrk_r+0x1c>
    1f5e:	602b      	str	r3, [r5, #0]
    1f60:	bd70      	pop	{r4, r5, r6, pc}
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	20000164 	.word	0x20000164

00001f68 <__sread>:
    1f68:	b570      	push	{r4, r5, r6, lr}
    1f6a:	000c      	movs	r4, r1
    1f6c:	250e      	movs	r5, #14
    1f6e:	5f49      	ldrsh	r1, [r1, r5]
    1f70:	f000 f8a6 	bl	20c0 <_read_r>
    1f74:	2800      	cmp	r0, #0
    1f76:	db03      	blt.n	1f80 <__sread+0x18>
    1f78:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1f7a:	181b      	adds	r3, r3, r0
    1f7c:	6563      	str	r3, [r4, #84]	; 0x54
    1f7e:	bd70      	pop	{r4, r5, r6, pc}
    1f80:	89a3      	ldrh	r3, [r4, #12]
    1f82:	4a02      	ldr	r2, [pc, #8]	; (1f8c <__sread+0x24>)
    1f84:	4013      	ands	r3, r2
    1f86:	81a3      	strh	r3, [r4, #12]
    1f88:	e7f9      	b.n	1f7e <__sread+0x16>
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	ffffefff 	.word	0xffffefff

00001f90 <__swrite>:
    1f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f92:	001f      	movs	r7, r3
    1f94:	898b      	ldrh	r3, [r1, #12]
    1f96:	0005      	movs	r5, r0
    1f98:	000c      	movs	r4, r1
    1f9a:	0016      	movs	r6, r2
    1f9c:	05db      	lsls	r3, r3, #23
    1f9e:	d505      	bpl.n	1fac <__swrite+0x1c>
    1fa0:	230e      	movs	r3, #14
    1fa2:	5ec9      	ldrsh	r1, [r1, r3]
    1fa4:	2200      	movs	r2, #0
    1fa6:	2302      	movs	r3, #2
    1fa8:	f000 f874 	bl	2094 <_lseek_r>
    1fac:	89a3      	ldrh	r3, [r4, #12]
    1fae:	4a05      	ldr	r2, [pc, #20]	; (1fc4 <__swrite+0x34>)
    1fb0:	0028      	movs	r0, r5
    1fb2:	4013      	ands	r3, r2
    1fb4:	81a3      	strh	r3, [r4, #12]
    1fb6:	0032      	movs	r2, r6
    1fb8:	230e      	movs	r3, #14
    1fba:	5ee1      	ldrsh	r1, [r4, r3]
    1fbc:	003b      	movs	r3, r7
    1fbe:	f000 f81f 	bl	2000 <_write_r>
    1fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fc4:	ffffefff 	.word	0xffffefff

00001fc8 <__sseek>:
    1fc8:	b570      	push	{r4, r5, r6, lr}
    1fca:	000c      	movs	r4, r1
    1fcc:	250e      	movs	r5, #14
    1fce:	5f49      	ldrsh	r1, [r1, r5]
    1fd0:	f000 f860 	bl	2094 <_lseek_r>
    1fd4:	89a3      	ldrh	r3, [r4, #12]
    1fd6:	1c42      	adds	r2, r0, #1
    1fd8:	d103      	bne.n	1fe2 <__sseek+0x1a>
    1fda:	4a05      	ldr	r2, [pc, #20]	; (1ff0 <__sseek+0x28>)
    1fdc:	4013      	ands	r3, r2
    1fde:	81a3      	strh	r3, [r4, #12]
    1fe0:	bd70      	pop	{r4, r5, r6, pc}
    1fe2:	2280      	movs	r2, #128	; 0x80
    1fe4:	0152      	lsls	r2, r2, #5
    1fe6:	4313      	orrs	r3, r2
    1fe8:	81a3      	strh	r3, [r4, #12]
    1fea:	6560      	str	r0, [r4, #84]	; 0x54
    1fec:	e7f8      	b.n	1fe0 <__sseek+0x18>
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	ffffefff 	.word	0xffffefff

00001ff4 <__sclose>:
    1ff4:	b510      	push	{r4, lr}
    1ff6:	230e      	movs	r3, #14
    1ff8:	5ec9      	ldrsh	r1, [r1, r3]
    1ffa:	f000 f815 	bl	2028 <_close_r>
    1ffe:	bd10      	pop	{r4, pc}

00002000 <_write_r>:
    2000:	b570      	push	{r4, r5, r6, lr}
    2002:	0005      	movs	r5, r0
    2004:	0008      	movs	r0, r1
    2006:	0011      	movs	r1, r2
    2008:	2200      	movs	r2, #0
    200a:	4c06      	ldr	r4, [pc, #24]	; (2024 <_write_r+0x24>)
    200c:	6022      	str	r2, [r4, #0]
    200e:	001a      	movs	r2, r3
    2010:	f7ff f926 	bl	1260 <_write>
    2014:	1c43      	adds	r3, r0, #1
    2016:	d103      	bne.n	2020 <_write_r+0x20>
    2018:	6823      	ldr	r3, [r4, #0]
    201a:	2b00      	cmp	r3, #0
    201c:	d000      	beq.n	2020 <_write_r+0x20>
    201e:	602b      	str	r3, [r5, #0]
    2020:	bd70      	pop	{r4, r5, r6, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	20000164 	.word	0x20000164

00002028 <_close_r>:
    2028:	2300      	movs	r3, #0
    202a:	b570      	push	{r4, r5, r6, lr}
    202c:	4c06      	ldr	r4, [pc, #24]	; (2048 <_close_r+0x20>)
    202e:	0005      	movs	r5, r0
    2030:	0008      	movs	r0, r1
    2032:	6023      	str	r3, [r4, #0]
    2034:	f7ff f94e 	bl	12d4 <_close>
    2038:	1c43      	adds	r3, r0, #1
    203a:	d103      	bne.n	2044 <_close_r+0x1c>
    203c:	6823      	ldr	r3, [r4, #0]
    203e:	2b00      	cmp	r3, #0
    2040:	d000      	beq.n	2044 <_close_r+0x1c>
    2042:	602b      	str	r3, [r5, #0]
    2044:	bd70      	pop	{r4, r5, r6, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	20000164 	.word	0x20000164

0000204c <_fstat_r>:
    204c:	2300      	movs	r3, #0
    204e:	b570      	push	{r4, r5, r6, lr}
    2050:	4c06      	ldr	r4, [pc, #24]	; (206c <_fstat_r+0x20>)
    2052:	0005      	movs	r5, r0
    2054:	0008      	movs	r0, r1
    2056:	0011      	movs	r1, r2
    2058:	6023      	str	r3, [r4, #0]
    205a:	f7ff f93e 	bl	12da <_fstat>
    205e:	1c43      	adds	r3, r0, #1
    2060:	d103      	bne.n	206a <_fstat_r+0x1e>
    2062:	6823      	ldr	r3, [r4, #0]
    2064:	2b00      	cmp	r3, #0
    2066:	d000      	beq.n	206a <_fstat_r+0x1e>
    2068:	602b      	str	r3, [r5, #0]
    206a:	bd70      	pop	{r4, r5, r6, pc}
    206c:	20000164 	.word	0x20000164

00002070 <_isatty_r>:
    2070:	2300      	movs	r3, #0
    2072:	b570      	push	{r4, r5, r6, lr}
    2074:	4c06      	ldr	r4, [pc, #24]	; (2090 <_isatty_r+0x20>)
    2076:	0005      	movs	r5, r0
    2078:	0008      	movs	r0, r1
    207a:	6023      	str	r3, [r4, #0]
    207c:	f7ff f932 	bl	12e4 <_isatty>
    2080:	1c43      	adds	r3, r0, #1
    2082:	d103      	bne.n	208c <_isatty_r+0x1c>
    2084:	6823      	ldr	r3, [r4, #0]
    2086:	2b00      	cmp	r3, #0
    2088:	d000      	beq.n	208c <_isatty_r+0x1c>
    208a:	602b      	str	r3, [r5, #0]
    208c:	bd70      	pop	{r4, r5, r6, pc}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	20000164 	.word	0x20000164

00002094 <_lseek_r>:
    2094:	b570      	push	{r4, r5, r6, lr}
    2096:	0005      	movs	r5, r0
    2098:	0008      	movs	r0, r1
    209a:	0011      	movs	r1, r2
    209c:	2200      	movs	r2, #0
    209e:	4c06      	ldr	r4, [pc, #24]	; (20b8 <_lseek_r+0x24>)
    20a0:	6022      	str	r2, [r4, #0]
    20a2:	001a      	movs	r2, r3
    20a4:	f7ff f920 	bl	12e8 <_lseek>
    20a8:	1c43      	adds	r3, r0, #1
    20aa:	d103      	bne.n	20b4 <_lseek_r+0x20>
    20ac:	6823      	ldr	r3, [r4, #0]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d000      	beq.n	20b4 <_lseek_r+0x20>
    20b2:	602b      	str	r3, [r5, #0]
    20b4:	bd70      	pop	{r4, r5, r6, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	20000164 	.word	0x20000164

000020bc <__malloc_lock>:
    20bc:	4770      	bx	lr

000020be <__malloc_unlock>:
    20be:	4770      	bx	lr

000020c0 <_read_r>:
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	0005      	movs	r5, r0
    20c4:	0008      	movs	r0, r1
    20c6:	0011      	movs	r1, r2
    20c8:	2200      	movs	r2, #0
    20ca:	4c06      	ldr	r4, [pc, #24]	; (20e4 <_read_r+0x24>)
    20cc:	6022      	str	r2, [r4, #0]
    20ce:	001a      	movs	r2, r3
    20d0:	f7ff f8a4 	bl	121c <_read>
    20d4:	1c43      	adds	r3, r0, #1
    20d6:	d103      	bne.n	20e0 <_read_r+0x20>
    20d8:	6823      	ldr	r3, [r4, #0]
    20da:	2b00      	cmp	r3, #0
    20dc:	d000      	beq.n	20e0 <_read_r+0x20>
    20de:	602b      	str	r3, [r5, #0]
    20e0:	bd70      	pop	{r4, r5, r6, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	20000164 	.word	0x20000164
    20e8:	42000800 	.word	0x42000800
    20ec:	42000c00 	.word	0x42000c00
    20f0:	42001000 	.word	0x42001000
    20f4:	42001400 	.word	0x42001400
    20f8:	42001800 	.word	0x42001800
    20fc:	42001c00 	.word	0x42001c00
    2100:	00000baa 	.word	0x00000baa
    2104:	00000ba6 	.word	0x00000ba6
    2108:	00000ba6 	.word	0x00000ba6
    210c:	00000c08 	.word	0x00000c08
    2110:	00000c08 	.word	0x00000c08
    2114:	00000bbe 	.word	0x00000bbe
    2118:	00000bb0 	.word	0x00000bb0
    211c:	00000bc4 	.word	0x00000bc4
    2120:	00000bf6 	.word	0x00000bf6
    2124:	00000c90 	.word	0x00000c90
    2128:	00000c70 	.word	0x00000c70
    212c:	00000c70 	.word	0x00000c70
    2130:	00000cfc 	.word	0x00000cfc
    2134:	00000c82 	.word	0x00000c82
    2138:	00000c9e 	.word	0x00000c9e
    213c:	00000c74 	.word	0x00000c74
    2140:	00000cac 	.word	0x00000cac
    2144:	00000cec 	.word	0x00000cec
    2148:	5420694f 	.word	0x5420694f
    214c:	616d7275 	.word	0x616d7275
    2150:	0d212120 	.word	0x0d212120
    2154:	00000000 	.word	0x00000000
    2158:	2044454c 	.word	0x2044454c
    215c:	000d4e4f 	.word	0x000d4e4f

00002160 <_global_impure_ptr>:
    2160:	20000008                                ... 

00002164 <__sf_fake_stderr>:
	...

00002184 <__sf_fake_stdin>:
	...

000021a4 <__sf_fake_stdout>:
	...

000021c4 <_init>:
    21c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21ca:	bc08      	pop	{r3}
    21cc:	469e      	mov	lr, r3
    21ce:	4770      	bx	lr

000021d0 <__init_array_start>:
    21d0:	000000dd 	.word	0x000000dd

000021d4 <_fini>:
    21d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21da:	bc08      	pop	{r3}
    21dc:	469e      	mov	lr, r3
    21de:	4770      	bx	lr

000021e0 <__fini_array_start>:
    21e0:	000000b5 	.word	0x000000b5
